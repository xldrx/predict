{"attacks": {"1": {"Motivation": 1, "Description": "In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to.", "Related_Attacks": [[122, "ChildOf"]], "ID": 1, "Categories": [], "Name": "Accessing Functionality Not Properly Constrained by ACLs"}, "2": {"Motivation": 1, "Description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.", "Related_Attacks": [[212, "ChildOf"]], "ID": 2, "Categories": [], "Name": "Inducing Account Lockout"}, "3": {"Motivation": 1, "Description": "An attacker intentionally introduces leading characters that enable getting the input past the filters. The API that is being targeted, ignores the leading \"ghost\" characters, and therefore processes the attackers' input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.", "Related_Attacks": [[267, "ChildOf"]], "ID": 3, "Categories": [], "Name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"}, "4": {"Motivation": 1, "Description": "This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names, URL, IP address, or IP Address ranges. The issue that the attacker can exploit is that these design assumptions may not be validated against a variety of different possible encodings and network address location formats. Applications that use naming for creating policy namespaces for managing access control may be susceptible to being queried directly by IP addresses, which is ultimately a more generally authoritative way of communicating on a network.", "Related_Attacks": [[267, "ChildOf"]], "ID": 4, "Categories": [], "Name": "Using Alternative IP Address Encodings"}, "5": {"Motivation": 1, "Description": "This attack against older telephone switches and trunks has been around for decades. The signal is sent by the attacker to impersonate a supervisor signal. This has the effect of rerouting or usurping command of the line and call. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing.", "Related_Attacks": [[152, "ChildOf"]], "ID": 5, "Categories": [], "Name": "Analog In-band Switching Signals (aka Blue Boxing)"}, "6": {"Motivation": 1, "Description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.", "Related_Attacks": [[137, "ChildOf"]], "ID": 6, "Categories": [], "Name": "Argument Injection"}, "7": {"Motivation": 1, "Description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the attacker constructs input strings that probe the target through simple Boolean SQL expressions. The attacker can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the attacker determines how and where the target is vulnerable to SQL Injection.", "Related_Attacks": [[66, "CanPrecede"], [66, "ChildOf"]], "ID": 7, "Categories": [], "Name": "Blind SQL Injection"}, "8": {"Motivation": 1, "Description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.", "Related_Attacks": [[100, "ChildOf"]], "ID": 8, "Categories": [], "Name": "Buffer Overflow in an API Call"}, "9": {"Motivation": 1, "Description": "This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.", "Related_Attacks": [[100, "ChildOf"], [10, "ChildOf"]], "ID": 9, "Categories": [], "Name": "Buffer Overflow in Local Command-Line Utilities"}, "10": {"Motivation": 1, "Description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.", "Related_Attacks": [[77, "ChildOf"], [100, "ChildOf"], [340, "HasMember"]], "ID": 10, "Categories": [], "Name": "Buffer Overflow via Environment Variables"}, "11": {"Motivation": 1, "Description": "An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.", "Related_Attacks": [[165, "ChildOf"], [266, "ChildOf"]], "ID": 11, "Categories": [], "Name": "Cause Web Server Misclassification"}, "12": {"Motivation": 1, "Description": "Attackers aware that more data is being fed into a multicast or public information distribution means can 'select' information bound only for another client, even if the distribution means itself forces users to authenticate in order to connect initially.", "Related_Attacks": [[21, "PeerOf"], [216, "ChildOf"]], "ID": 12, "Categories": [], "Name": "Choosing a Message/Channel Identifier on a Public/Multicast Channel"}, "13": {"Motivation": 1, "Description": "The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker.", "Related_Attacks": [[77, "ChildOf"], [14, "CanPrecede"], [10, "PeerOf"], [264, "ChildOf"]], "ID": 13, "Categories": [], "Name": "Subverting Environment Variable Values"}, "14": {"Motivation": 1, "Description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.", "Related_Attacks": [[8, "ChildOf"], [100, "ChildOf"]], "ID": 14, "Categories": [], "Name": "Client-side Injection-induced Buffer Overflow"}, "15": {"Motivation": 1, "Description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.", "Related_Attacks": [[6, "ChildOf"], [248, "ChildOf"]], "ID": 15, "Categories": [], "Name": "Command Delimiters"}, "16": {"Motivation": 1, "Description": "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.", "Related_Attacks": [[49, "ChildOf"]], "ID": 16, "Categories": [], "Name": "Dictionary-based Password Attack"}, "17": {"Motivation": 1, "Description": "An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.", "Related_Attacks": [[1, "ChildOf"], [233, "ChildOf"], [165, "ChildOf"]], "ID": 17, "Categories": [], "Name": "Accessing, Modifying or Executing Executable Files"}, "18": {"Motivation": 1, "Description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements.", "Related_Attacks": [[63, "ChildOf"], [242, "ChildOf"], [341, "HasMember"]], "ID": 18, "Categories": [], "Name": "Embedding Scripts in Non-Script Elements"}, "19": {"Motivation": 1, "Description": "An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The attacker leverages this capability to execute scripts to execute his/her own script by embedding it within other scripts that the target software is likely to execute. The attacker must have the ability to inject script into script that is likely to be executed. If this is done, then the attacker can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts.", "Related_Attacks": [[18, "PeerOf"], [242, "ChildOf"], [341, "HasMember"]], "ID": 19, "Categories": [], "Name": "Embedding Scripts within Scripts"}, "20": {"Motivation": 1, "Description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.", "Related_Attacks": [[112, "ChildOf"]], "ID": 20, "Categories": [], "Name": "Encryption Brute Forcing"}, "21": {"Motivation": 1, "Description": "Attacks on session IDs and resource IDs take advantage of the fact that some software accepts user input without verifying its authenticity. For example, a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or indeed the process that wrote the message to the queue are authentic and authorized to do so.", "Related_Attacks": [[225, "ChildOf"]], "ID": 21, "Categories": [], "Name": "Exploitation of Session Variables, Resource IDs and other Trusted Credentials"}, "22": {"Motivation": 1, "Description": "An attack of this type exploits a programs' vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client.", "Related_Attacks": [[232, "ChildOf"]], "ID": 22, "Categories": [], "Name": "Exploiting Trust in Client (aka Make the Client Invisible)"}, "23": {"Motivation": 1, "Description": "An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.", "Related_Attacks": [[241, "ChildOf"], [242, "ChildOf"], [165, "ChildOf"]], "ID": 23, "Categories": [], "Name": "File System Function Injection, Content Based"}, "24": {"Motivation": 1, "Description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).", "Related_Attacks": [[100, "CanFollow"], [100, "ChildOf"]], "ID": 24, "Categories": [], "Name": "Filter Failure through Buffer Overflow"}, "25": {"Motivation": 1, "Description": "This attack attempts to trigger and exploit a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock condition are not easy to detect.", "Related_Attacks": [[172, "ChildOf"]], "ID": 25, "Categories": [], "Name": "Forced Deadlock"}, "26": {"Motivation": 1, "Description": "This attack targets a race condition occurring when multiple processes access and manipulate the same resource concurrently and the outcome of the execution depends on the particular order in which the access takes place. The attacker can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance a race condition can occur while accessing a file, the attacker can trick the system by replacing the original file with his version and cause the system to read the malicious file.", "Related_Attacks": [[172, "ChildOf"]], "ID": 26, "Categories": [], "Name": "Leveraging Race Conditions"}, "27": {"Motivation": 1, "Description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to her. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file she will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.", "Related_Attacks": [[29, "ChildOf"], [26, "ChildOf"]], "ID": 27, "Categories": [], "Name": "Leveraging Race Conditions via Symbolic Links"}, "28": {"Motivation": 1, "Description": "Fuzzing is a software testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system.", "Related_Attacks": [[223, "ChildOf"]], "ID": 28, "Categories": [], "Name": "Fuzzing"}, "29": {"Motivation": 1, "Description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The typical example is the file access. The attacker can leverage a file access race condition by \"running the race\", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker could do something such as replace the file and cause an escalation of privilege.", "Related_Attacks": [[26, "ChildOf"], [172, "ChildOf"]], "ID": 29, "Categories": [], "Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"}, "30": {"Motivation": 1, "Description": "Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.", "Related_Attacks": [[232, "ChildOf"]], "ID": 30, "Categories": [], "Name": "Hijacking a Privileged Thread of Execution"}, "31": {"Motivation": 1, "Description": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems.", "Related_Attacks": [[39, "ChildOf"], [21, "ChildOf"], [255, "ChildOf"], [117, "ChildOf"], [262, "ChildOf"]], "ID": 31, "Categories": [], "Name": "Accessing/Intercepting/Modifying HTTP Cookies"}, "32": {"Motivation": 1, "Description": "A variant of cross-site scripting called \"reflected\" cross-site scripting, the HTTP Query Strings attack consists of passing a malicious script inside an otherwise valid HTTP request query string. This is of significant concern for sites that rely on dynamic, user-generated content such as bulletin boards, news sites, blogs, and web enabled administration GUIs. The malicious script may steal session data, browse history, probe files, or otherwise execute attacks on the client side. Once the attacker has prepared the malicious HTTP query it is sent to a victim user (perhaps by email, IM, or posted on an online forum), who clicks on a normal looking link that contains a poison query string. This technique can be made more effective through the use of services like http://tinyurl.com/, which makes very small URLs that will redirect to very large, complex ones. The victim will not know what he is really clicking on.", "Related_Attacks": [[18, "ChildOf"], [220, "ChildOf"]], "ID": 32, "Categories": [], "Name": "Embedding Scripts in HTTP Query Strings"}, "33": {"Motivation": 1, "Description": "HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.", "Related_Attacks": [[220, "ChildOf"], [359, "HasMember"]], "ID": 33, "Categories": [], "Name": "HTTP Request Smuggling"}, "34": {"Motivation": 1, "Description": "This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached.", "Related_Attacks": [[220, "ChildOf"], [358, "HasMember"]], "ID": 34, "Categories": [], "Name": "HTTP Response Splitting"}, "35": {"Motivation": 1, "Description": "An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.", "Related_Attacks": [[23, "PeerOf"], [75, "PeerOf"], [165, "ChildOf"]], "ID": 35, "Categories": [], "Name": "Leverage Executable Code in Non-Executable Files"}, "36": {"Motivation": 1, "Description": "An attacker searches for and invokes Web Services APIs that the target system designers did not intend to be publicly available. If these APIs fail to authenticate requests the attacker may be able to invoke services and/or gain privileges they are not authorized for.", "Related_Attacks": [[113, "ChildOf"]], "ID": 36, "Categories": [], "Name": "Using Unpublished Web Service APIs"}, "37": {"Motivation": 1, "Description": "An attacker can resort to stealing data embedded in client distributions or client code in order to gain certain information. This information can reveal confidential contents, such as account numbers, or can be used as an intermediate step in a larger attack (such as by stealing keys/credentials).", "Related_Attacks": [[167, "ChildOf"]], "ID": 37, "Categories": [], "Name": "Lifting Data Embedded in Client Distributions"}, "38": {"Motivation": 1, "Description": "This attack loads a malicious resource into a program's standard path used to bootstrap and/or provide contextual information for a program like a path variable or classpath. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.", "Related_Attacks": [[13, "ChildOf"], [148, "ChildOf"], [154, "ChildOf"]], "ID": 38, "Categories": [], "Name": "Leveraging/Manipulating Configuration File Search Paths"}, "39": {"Motivation": 1, "Description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.", "Related_Attacks": [[22, "ChildOf"], [223, "ChildOf"]], "ID": 39, "Categories": [], "Name": "Manipulating Opaque Client-based Data Tokens"}, "40": {"Motivation": 1, "Description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.", "Related_Attacks": [[249, "ChildOf"]], "ID": 40, "Categories": [], "Name": "Manipulating Writeable Terminal Devices"}, "41": {"Motivation": 1, "Description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs.", "Related_Attacks": [[242, "ChildOf"], [134, "ChildOf"]], "ID": 41, "Categories": [], "Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"}, "42": {"Motivation": 1, "Description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.", "Related_Attacks": [[100, "ChildOf"]], "ID": 42, "Categories": [], "Name": "MIME Conversion"}, "43": {"Motivation": 1, "Description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.", "Related_Attacks": [[267, "ChildOf"]], "ID": 43, "Categories": [], "Name": "Exploiting Multiple Input Interpretation Layers"}, "44": {"Motivation": 1, "Description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.", "Related_Attacks": [[23, "PeerOf"], [35, "PeerOf"], [100, "ChildOf"], [165, "ChildOf"]], "ID": 44, "Categories": [], "Name": "Overflow Binary Resource File"}, "45": {"Motivation": 1, "Description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.", "Related_Attacks": [[100, "ChildOf"]], "ID": 45, "Categories": [], "Name": "Buffer Overflow via Symbolic Links"}, "46": {"Motivation": 1, "Description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.", "Related_Attacks": [[100, "ChildOf"], [8, "PeerOf"], [10, "PeerOf"]], "ID": 46, "Categories": [], "Name": "Overflow Variables and Tags"}, "47": {"Motivation": 1, "Description": "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.", "Related_Attacks": [[100, "ChildOf"]], "ID": 47, "Categories": [], "Name": "Buffer Overflow via Parameter Expansion"}, "48": {"Motivation": 1, "Description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.", "Related_Attacks": [[210, "ChildOf"]], "ID": 48, "Categories": [], "Name": "Passing Local Filenames to Functions That Expect a URL"}, "49": {"Motivation": 1, "Description": "In this attack, the attacker tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.", "Related_Attacks": [[112, "ChildOf"]], "ID": 49, "Categories": [], "Name": "Password Brute Forcing"}, "50": {"Motivation": 1, "Description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user.", "Related_Attacks": [[212, "ChildOf"]], "ID": 50, "Categories": [], "Name": "Password Recovery Exploitation"}, "51": {"Motivation": 1, "Description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces.", "Related_Attacks": [[269, "ChildOf"]], "ID": 51, "Categories": [], "Name": "Poison Web Service Registry"}, "52": {"Motivation": 1, "Description": "An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).", "Related_Attacks": [[267, "ChildOf"], [361, "HasMember"]], "ID": 52, "Categories": [], "Name": "Embedding NULL Bytes"}, "53": {"Motivation": 1, "Description": "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.", "Related_Attacks": [[52, "ChildOf"], [267, "ChildOf"]], "ID": 53, "Categories": [], "Name": "Postfix, Null Terminate, and Backslash"}, "54": {"Motivation": 1, "Description": "An Attacker, aware of an application's location (and possibly authorized to use the application) can probe the application's structure and evaluate its robustness by probing its error conditions (not unlike one would during a 'fuzz' test, but more purposefully here) in order to support attacks such as blind SQL injection, or for the more general task of mapping the application to mount another subsequent attack.", "Related_Attacks": [[210, "ChildOf"], [116, "ChildOf"]], "ID": 54, "Categories": [], "Name": "Probing an Application Through Targeting its Error Reporting"}, "55": {"Motivation": 1, "Description": "An attacker gets access to the database table where hashes of passwords are stored. He then uses a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.", "Related_Attacks": [[49, "ChildOf"]], "ID": 55, "Categories": [], "Name": "Rainbow Table Password Cracking"}, "56": {"Motivation": 1, "Description": "Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data.", "Related_Attacks": [[207, "ChildOf"]], "ID": 56, "Categories": [], "Name": "Removing/short-circuiting 'guard logic'"}, "57": {"Motivation": 1, "Description": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to place man in the middle once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated.", "Related_Attacks": [[94, "ChildOf"]], "ID": 57, "Categories": [], "Name": "Utilizing REST's Trust in the System Resource to Register Man in the Middle"}, "58": {"Motivation": 1, "Description": "Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side.", "Related_Attacks": [[1, "ChildOf"], [233, "ChildOf"]], "ID": 58, "Categories": [], "Name": "Restful Privilege Elevation"}, "59": {"Motivation": 1, "Description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.", "Related_Attacks": [[196, "ChildOf"], [351, "HasMember"]], "ID": 59, "Categories": [], "Name": "Session Credential Falsification through Prediction"}, "60": {"Motivation": 1, "Description": "This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.", "Related_Attacks": [[21, "ChildOf"]], "ID": 60, "Categories": [], "Name": "Reusing Session IDs (aka Session Replay)"}, "61": {"Motivation": 1, "Description": "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.", "Related_Attacks": [[21, "ChildOf"], [370, "HasMember"]], "ID": 61, "Categories": [], "Name": "Session Fixation"}, "62": {"Motivation": 1, "Description": "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.", "Related_Attacks": [[21, "ChildOf"], [342, "HasMember"]], "ID": 62, "Categories": [], "Name": "Cross Site Request Forgery (aka Session Riding)"}, "63": {"Motivation": 1, "Description": "An attacker embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level.", "Related_Attacks": [[242, "ChildOf"], [341, "HasMember"]], "ID": 63, "Categories": [], "Name": "Simple Script Injection"}, "64": {"Motivation": 1, "Description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.", "Related_Attacks": [[72, "ChildOf"], [71, "PeerOf"], [79, "PeerOf"], [79, "ChildOf"], [72, "PeerOf"], [43, "PeerOf"], [267, "ChildOf"], [126, "ChildOf"]], "ID": 64, "Categories": [], "Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"}, "65": {"Motivation": 1, "Description": "Attackers can capture application code bound for the client and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.", "Related_Attacks": [[37, "ChildOf"], [158, "ChildOf"]], "ID": 65, "Categories": [], "Name": "Passively Sniff and Capture Application Code Bound for Authorized Client"}, "66": {"Motivation": 1, "Description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended.", "Related_Attacks": [[152, "ChildOf"], [352, "HasMember"]], "ID": 66, "Categories": [], "Name": "SQL Injection"}, "67": {"Motivation": 1, "Description": "This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.", "Related_Attacks": [[100, "ChildOf"], [339, "HasMember"]], "ID": 67, "Categories": [], "Name": "String Format Overflow in syslog()"}, "68": {"Motivation": 1, "Description": "Because languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment, subverting this mechanism can be instrumental in an attacker escalating privilege.", "Related_Attacks": [[232, "ChildOf"]], "ID": 68, "Categories": [], "Name": "Subvert Code-signing Facilities"}, "69": {"Motivation": 1, "Description": "This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call.", "Related_Attacks": [[8, "ChildOf"], [9, "ChildOf"], [10, "ChildOf"], [67, "ChildOf"], [232, "ChildOf"]], "ID": 69, "Categories": [], "Name": "Target Programs with Elevated Privileges"}, "70": {"Motivation": 1, "Description": "An attacker may try certain common (default) usernames and passwords to gain access into the system and perform unauthorized actions. An attacker may try an intelligent brute force using known vendor default credentials as well as a dictionary of common usernames and passwords.", "Related_Attacks": [[49, "ChildOf"]], "ID": 70, "Categories": [], "Name": "Try Common(default) Usernames and Passwords"}, "71": {"Motivation": 1, "Description": "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.", "Related_Attacks": [[64, "PeerOf"], [79, "PeerOf"], [72, "PeerOf"], [43, "PeerOf"], [267, "ChildOf"]], "ID": 71, "Categories": [], "Name": "Using Unicode Encoding to Bypass Validation Logic"}, "72": {"Motivation": 1, "Description": "This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).", "Related_Attacks": [[79, "PeerOf"], [71, "PeerOf"], [43, "PeerOf"], [267, "ChildOf"]], "ID": 72, "Categories": [], "Name": "URL Encoding"}, "73": {"Motivation": 1, "Description": "An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.", "Related_Attacks": [[63, "ChildOf"], [165, "ChildOf"]], "ID": 73, "Categories": [], "Name": "User-Controlled Filename"}, "74": {"Motivation": 1, "Description": "An attacker modifies state information maintained by the target software in user-accessible locations. If successful, the target software will use this tainted state information and execute in an unintended manner.", "Related_Attacks": [[172, "ChildOf"]], "ID": 74, "Categories": [], "Name": "Manipulating User State"}, "75": {"Motivation": 1, "Description": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.", "Related_Attacks": [[233, "ChildOf"], [176, "ChildOf"]], "ID": 75, "Categories": [], "Name": "Manipulating Writeable Configuration Files"}, "76": {"Motivation": 1, "Description": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.", "Related_Attacks": [[13, "ChildOf"], [137, "ChildOf"], [171, "ChildOf"]], "ID": 76, "Categories": [], "Name": "Manipulating Input to File System Calls"}, "77": {"Motivation": 1, "Description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.", "Related_Attacks": [[22, "ChildOf"], [265, "ChildOf"]], "ID": 77, "Categories": [], "Name": "Manipulating User-Controlled Variables"}, "78": {"Motivation": 1, "Description": "This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.", "Related_Attacks": [[64, "PeerOf"], [79, "ChildOf"], [71, "PeerOf"], [43, "PeerOf"], [267, "ChildOf"], [126, "ChildOf"]], "ID": 78, "Categories": [], "Name": "Using Escaped Slashes in Alternate Encoding"}, "79": {"Motivation": 1, "Description": "This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.", "Related_Attacks": [[71, "PeerOf"], [43, "PeerOf"], [267, "ChildOf"], [126, "ChildOf"]], "ID": 79, "Categories": [], "Name": "Using Slashes in Alternate Encoding"}, "80": {"Motivation": 1, "Description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.", "Related_Attacks": [[64, "PeerOf"], [71, "PeerOf"], [267, "ChildOf"]], "ID": 80, "Categories": [], "Name": "Using UTF-8 Encoding to Bypass Validation Logic"}, "81": {"Motivation": 1, "Description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.", "Related_Attacks": [[268, "ChildOf"]], "ID": 81, "Categories": [], "Name": "Web Logs Tampering"}, "82": {"Motivation": 1, "Description": "XML Denial of Service (XDoS) can be applied to any technology that utilizes XML data. This is, of course, most distributed systems technology including Java, .Net, databases, and so on. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets.", "Related_Attacks": [], "ID": 82, "Categories": [], "Name": "Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))"}, "83": {"Motivation": 1, "Description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that he normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. In order to successfully inject XML and retrieve information from a database, an attacker:", "Related_Attacks": [[250, "ChildOf"], [372, "HasMember"], [250, "ChildOf"]], "ID": 83, "Categories": [], "Name": "XPath Injection"}, "84": {"Motivation": 1, "Description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.", "Related_Attacks": [[250, "ChildOf"], [379, "HasMember"], [250, "ChildOf"]], "ID": 84, "Categories": [], "Name": "XQuery Injection"}, "85": {"Motivation": 1, "Description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application.", "Related_Attacks": [[541, "ChildOf"]], "ID": 85, "Categories": [], "Name": "AJAX Fingerprinting"}, "86": {"Motivation": 1, "Description": "An attack of this type exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.", "Related_Attacks": [[18, "ChildOf"], [220, "ChildOf"]], "ID": 86, "Categories": [], "Name": "Embedding Script (XSS ) in HTTP Headers"}, "87": {"Motivation": 1, "Description": "An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry.", "Related_Attacks": [[210, "ChildOf"], [367, "HasMember"]], "ID": 87, "Categories": [], "Name": "Forceful Browsing"}, "88": {"Motivation": 1, "Description": "An attacker can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.", "Related_Attacks": [[15, "ChildOf"], [364, "HasMember"]], "ID": 88, "Categories": [], "Name": "OS Command Injection"}, "89": {"Motivation": 1, "Description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to his site rather than the originally intended one.", "Related_Attacks": [[151, "ChildOf"], [161, "ChildOf"]], "ID": 89, "Categories": [], "Name": "Pharming"}, "90": {"Motivation": 1, "Description": "An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials.", "Related_Attacks": [[220, "ChildOf"], [204, "ChildOf"], [114, "ChildOf"]], "ID": 90, "Categories": [], "Name": "Reflection Attack in Authentication Protocol"}, "91": {"Motivation": 1, "Description": "Image tags are an often overlooked, but convenient, means for a Cross Site Scripting attack. The attacker can inject script contents into an image (IMG) tag in order to steal information from a victim's browser and execute malicious scripts.", "Related_Attacks": [[18, "ChildOf"]], "ID": 91, "Categories": [], "Name": "XSS in IMG Tags"}, "92": {"Motivation": 1, "Description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.", "Related_Attacks": [[128, "ChildOf"]], "ID": 92, "Categories": [], "Name": "Forced Integer Overflow"}, "93": {"Motivation": 1, "Description": "This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.", "Related_Attacks": [[268, "ChildOf"]], "ID": 93, "Categories": [], "Name": "Log Injection-Tampering-Forging"}, "94": {"Motivation": 1, "Description": "This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.", "Related_Attacks": [[22, "ChildOf"]], "ID": 94, "Categories": [], "Name": "Man in the Middle Attack"}, "95": {"Motivation": 1, "Description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.", "Related_Attacks": [[210, "ChildOf"]], "ID": 95, "Categories": [], "Name": "WSDL Scanning"}, "96": {"Motivation": 1, "Description": "An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.", "Related_Attacks": [[176, "ChildOf"]], "ID": 96, "Categories": [], "Name": "Block Access to Libraries"}, "97": {"Motivation": 1, "Description": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as:", "Related_Attacks": [[20, "ChildOf"], [281, "ChildOf"]], "ID": 97, "Categories": [], "Name": "Cryptanalysis"}, "98": {"Motivation": 1, "Description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.", "Related_Attacks": [[151, "ChildOf"]], "ID": 98, "Categories": [], "Name": "Phishing"}, "99": {"Motivation": 1, "Description": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.99.1]", "Related_Attacks": [[82, "ChildOf"]], "ID": 99, "Categories": [], "Name": "XML Parser Attack"}, "100": {"Motivation": 1, "Description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice.", "Related_Attacks": [[24, "CanPrecede"], [123, "ChildOf"], [340, "HasMember"]], "ID": 100, "Categories": [], "Name": "Overflow Buffers"}, "101": {"Motivation": 1, "Description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.", "Related_Attacks": [[253, "ChildOf"], [369, "HasMember"]], "ID": 101, "Categories": [], "Name": "Server Side Include (SSI) Injection"}, "102": {"Motivation": 1, "Description": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim.", "Related_Attacks": [[21, "ChildOf"]], "ID": 102, "Categories": [], "Name": "Session Sidejacking"}, "103": {"Motivation": 1, "Description": "In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he's clicking on versus what he or she is actually clicking on.", "Related_Attacks": [[173, "ChildOf"]], "ID": 103, "Categories": [], "Name": "Clickjacking"}, "104": {"Motivation": 1, "Description": "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.", "Related_Attacks": [[233, "ChildOf"]], "ID": 104, "Categories": [], "Name": "Cross Zone Scripting"}, "105": {"Motivation": 1, "Description": "HTTP Request Splitting (also known as HTTP Request Smuggling) is an attack pattern where an attacker attempts to insert additional HTTP requests in the body of the original (enveloping) HTTP request in such a way that the browser interprets it as one request but the web server interprets it as two.", "Related_Attacks": [[220, "ChildOf"], [357, "HasMember"]], "ID": 105, "Categories": [], "Name": "HTTP Request Splitting"}, "106": {"Motivation": 1, "Description": "An attacker may leverage a system weakness where logs are susceptible to log injection to insert scripts into the system's logs. If these logs are later viewed by an administrator through a thin administrative interface and the log data is not properly HTML encoded before being written to the page, the attackers' scripts stored in the log will be executed in the administrative interface with potentially serious consequences. This attack pattern is really a combination of two other attack patterns: log injection and stored cross site scripting.", "Related_Attacks": [[93, "ChildOf"], [63, "ChildOf"], [18, "ChildOf"]], "ID": 106, "Categories": [], "Name": "Cross Site Scripting through Log Files"}, "107": {"Motivation": 1, "Description": "Cross Site Tracing (XST) enables an attacker to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The attacker first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the attackers' malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST.", "Related_Attacks": [[86, "ChildOf"]], "ID": 107, "Categories": [], "Name": "Cross Site Tracing"}, "108": {"Motivation": 1, "Description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.", "Related_Attacks": [[248, "ChildOf"]], "ID": 108, "Categories": [], "Name": "Command Line Execution through SQL Injection"}, "109": {"Motivation": 1, "Description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.", "Related_Attacks": [[66, "ChildOf"]], "ID": 109, "Categories": [], "Name": "Object Relational Mapping Injection"}, "110": {"Motivation": 1, "Description": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.", "Related_Attacks": [[66, "ChildOf"], [7, "ChildOf"], [280, "ChildOf"]], "ID": 110, "Categories": [], "Name": "SQL Injection through SOAP Parameter Tampering"}, "111": {"Motivation": 1, "Description": "An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.", "Related_Attacks": [[184, "ChildOf"], [116, "ChildOf"]], "ID": 111, "Categories": [], "Name": "JSON Hijacking (aka JavaScript Hijacking)"}, "112": {"Motivation": 1, "Description": "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.", "Related_Attacks": [[223, "ChildOf"], [344, "HasMember"]], "ID": 112, "Categories": [], "Name": "Brute Force"}, "113": {"Motivation": 1, "Description": "An attacker manipulates the processing of Application Programming Interface (API) resulting in the API's function having an adverse impact upon the security of the system or application implementing the API. This can allow the attacker to execute functionality not intended by the API implementation, possibly compromising the system or application which integrates the API. API Abuse can take on a number of forms. For example, the API may trust that the calling function properly validates its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution. Another example could be API methods that should be disabled in a production application but were not, thus exposing dangerous functionality within a production environment.", "Related_Attacks": [[210, "ChildOf"]], "ID": 113, "Categories": [], "Name": "API Abuse/Misuse"}, "114": {"Motivation": 1, "Description": "An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns.", "Related_Attacks": [[225, "ChildOf"]], "ID": 114, "Categories": [], "Name": "Authentication Abuse"}, "115": {"Motivation": 1, "Description": "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.", "Related_Attacks": [[225, "ChildOf"]], "ID": 115, "Categories": [], "Name": "Authentication Bypass"}, "116": {"Motivation": 1, "Description": "An attacker probes the target in a manner that is designed to solicit information relevant to system security. This is achieved by sending data that is syntactically invalid or non-standard relative to a given service, protocol, or expected-input, or by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target. As a result the attacker is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Some exchanges with the target may trigger unhandled exceptions or verbose error messages. When this happens error messages may reveal information like stack traces, configuration information, path information, or database messages. This type of attack also includes manipulation of query strings in a URI, such as by attempting to produce invalid SQL queries or by trying alternative path values, in the hope that the server will return useful information. This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.", "Related_Attacks": [], "ID": 116, "Categories": ["Software", "Gather Information"], "Name": "Excavation"}, "117": {"Motivation": 1, "Description": "An attacker monitors data streams to or from a target in order to gather information. This attack may be undertaken to gather information to support a later attack or the data collected may be the end goal of the attack. This attack usually involves sniffing network traffic, but may include observing other types of data streams, such as radio. In most varieties of this attack, the attacker is passive and simply observes regular communication, however in some variants the attacker may attempt to initiate the establishment of a data stream or influence the nature of the data transmitted. However, in all variants of this attack, and distinguishing this attack from other data collection methods, the attacker is not the intended recipient of the data stream. Unlike some other data leakage attacks, the attacker is observing explicit data channels (e.g. network traffic) and reading the content. This differs from attacks that collect more qualitative information, such as communication volume, or other information not explicitly communicated via a data stream.", "Related_Attacks": [], "ID": 117, "Categories": ["Communications", "Gather Information"], "Name": "Interception"}, "120": {"Motivation": 1, "Description": "The attacker utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. The may allow the attacker to bypass filters that attempt to detect illegal characters or strings, such as might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.", "Related_Attacks": [[267, "ChildOf"]], "ID": 120, "Categories": [], "Name": "Double Encoding"}, "121": {"Motivation": 1, "Description": "An attacker exploits a sample, demonstration, or test API that is insecure by default and should not be resident on production systems. Some applications include APIs that are intended to allow an administrator to test and refine their domain. These APIs should usually be disabled once a system enters a production environment. Testing APIs may expose a great deal of diagnostic information intended to aid an administrator, but which can also be used by an attacker to further refine their attack. Moreover, testing APIs may not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may have many flaws and vulnerabilities that would allow an attacker to severely disrupt a target.", "Related_Attacks": [[113, "ChildOf"]], "ID": 121, "Categories": [], "Name": "Locate and Exploit Test APIs"}, "122": {"Motivation": 1, "Description": "An attacker is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An attacker may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the attacker never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the attacker does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.", "Related_Attacks": [[232, "ChildOf"]], "ID": 122, "Categories": [], "Name": "Exploitation of Authorization"}, "123": {"Motivation": 1, "Description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.", "Related_Attacks": [[255, "ChildOf"]], "ID": 123, "Categories": ["Software"], "Name": "Buffer Manipulation"}, "124": {"Motivation": 1, "Description": "An attacker exploits a data structure shared between multiple applications or an application pool to affect application behavior. Data may be shared between multiple applications or between multiple threads of a single application. Data sharing is usually accomplished through mutual access to a single memory location. If an attacker can manipulate this shared data (usually by co-opting one of the applications or threads) the other applications or threads using the shared data will often continue to trust the validity of the compromised shared data and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared data, or even cause a crash or compromise of the sharing applications.", "Related_Attacks": [[255, "ChildOf"]], "ID": 124, "Categories": [], "Name": "Attack through Shared Data"}, "125": {"Motivation": 1, "Description": "An attacker consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow control in management of interactions. Since each request consumes some of the target's resources, if a sufficiently large number of requests must be processed at the same time then the target's resources can be exhausted.", "Related_Attacks": [], "ID": 125, "Categories": ["Software", "Deplete Resources"], "Name": "Flooding"}, "127": {"Motivation": 1, "Description": "An attacker crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An attacker can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.", "Related_Attacks": [[152, "ChildOf"], [122, "ChildOf"]], "ID": 127, "Categories": [], "Name": "Directory Indexing"}, "128": {"Motivation": 1, "Description": "An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.", "Related_Attacks": [[255, "ChildOf"]], "ID": 128, "Categories": [], "Name": "Integer Attacks"}, "129": {"Motivation": 1, "Description": "This attack involves an attacker manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.", "Related_Attacks": [[255, "ChildOf"]], "ID": 129, "Categories": [], "Name": "Pointer Attack"}, "130": {"Motivation": 1, "Description": "An attacker causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. For example, using an Integer Attack, the attacker could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.", "Related_Attacks": [], "ID": 130, "Categories": ["Software", "Deplete Resources"], "Name": "Excessive Allocation"}, "131": {"Motivation": 1, "Description": "An attacker utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the attacker determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the attacker. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor attacker who would be unable to flood the target can still utilize this attack.", "Related_Attacks": [], "ID": 131, "Categories": ["Software", "Deplete Resources"], "Name": "Resource Leak Exposure"}, "132": {"Motivation": 1, "Description": "An attacker positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications. In some variants of this attack the attacker may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the attacker may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the attacker to control the actions of the target or to cause the target to expose information to the attacker. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.", "Related_Attacks": [[154, "ChildOf"], [176, "ChildOf"]], "ID": 132, "Categories": [], "Name": "Symlink Attack"}, "133": {"Motivation": 1, "Description": "An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is blindly attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.", "Related_Attacks": [[210, "ChildOf"]], "ID": 133, "Categories": [], "Name": "Try All Common Application Switches and Options"}, "134": {"Motivation": 1, "Description": "An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.", "Related_Attacks": [[152, "ChildOf"], [363, "HasMember"]], "ID": 134, "Categories": [], "Name": "Email Injection"}, "135": {"Motivation": 1, "Description": "An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack.", "Related_Attacks": [[152, "ChildOf"]], "ID": 135, "Categories": [], "Name": "Format String Injection"}, "136": {"Motivation": 1, "Description": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.", "Related_Attacks": [[152, "ChildOf"]], "ID": 136, "Categories": ["WASC-29 - LDAP Injection"], "Name": "LDAP Injection"}, "137": {"Motivation": 1, "Description": "An attacker exploits weaknesses in input validation by manipulating the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.", "Related_Attacks": [[152, "ChildOf"]], "ID": 137, "Categories": [], "Name": "Parameter Injection"}, "138": {"Motivation": 1, "Description": "An attacker supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an attacker can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the attacker created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the attacker take control of the targeted application.", "Related_Attacks": [[152, "ChildOf"]], "ID": 138, "Categories": [], "Name": "Reflection Injection"}, "139": {"Motivation": 1, "Description": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.", "Related_Attacks": [[126, "ChildOf"], [154, "ChildOf"]], "ID": 139, "Categories": [], "Name": "Relative Path Traversal"}, "140": {"Motivation": 1, "Description": "Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.", "Related_Attacks": [[74, "ChildOf"]], "ID": 140, "Categories": [], "Name": "Bypassing of Intermediate Forms in Multiple-Form Sets"}, "141": {"Motivation": 1, "Description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.", "Related_Attacks": [[210, "ChildOf"], [89, "CanPrecede"]], "ID": 141, "Categories": [], "Name": "Cache Poisoning"}, "142": {"Motivation": 1, "Description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An attacker modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the attacker specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Attackers can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.", "Related_Attacks": [[141, "ChildOf"], [161, "ChildOf"], [89, "CanPrecede"]], "ID": 142, "Categories": [], "Name": "DNS Cache Poisoning"}, "143": {"Motivation": 1, "Description": "An attacker searches a targeted web site for web pages that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging pages, or otherwise predictable pages within the site tree. For example, if an attacker might be able to notice a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked. Using this, the attacker may be able to gain access to information that the targeted site did not intend to make public.", "Related_Attacks": [[87, "ChildOf"]], "ID": 143, "Categories": [], "Name": "Detect Unpublicized Web Pages"}, "144": {"Motivation": 1, "Description": "An attacker searches a targeted web site for web services that have not been publicized. Generally this involves mapping the published web site by spidering through all the published links and then attempt to access well-known debugging or logging services, or otherwise predictable services within the site tree. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.", "Related_Attacks": [[87, "ChildOf"]], "ID": 144, "Categories": [], "Name": "Detect Unpublicized Web Services"}, "145": {"Motivation": 1, "Description": "An attacker spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an attacker modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the attacker) in the message. This would prevent the recipient from realizing that a change occurred.", "Related_Attacks": [[148, "ChildOf"]], "ID": 145, "Categories": [], "Name": "Checksum Spoofing"}, "146": {"Motivation": 1, "Description": "An attacker corrupts or modifies the content of XML schema information passing between client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the Schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the attacker removes this attribute from the schema then documents create using the new grammar will lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the attacker may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might us a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).", "Related_Attacks": [[271, "ChildOf"]], "ID": 146, "Categories": [], "Name": "XML Schema Poisoning"}, "147": {"Motivation": 1, "Description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.", "Related_Attacks": [[528, "ChildOf"]], "ID": 147, "Categories": [], "Name": "XML Ping of the Death"}, "148": {"Motivation": 1, "Description": "An attacker modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the attackers' content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the attacker will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud if the content governs financial transactions, privacy violations, and other results.", "Related_Attacks": [[345, "HasMember"]], "ID": 148, "Categories": ["Software", "Deceptive Interactions"], "Name": "Content Spoofing"}, "149": {"Motivation": 1, "Description": "An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.", "Related_Attacks": [[150, "ChildOf"]], "ID": 149, "Categories": [], "Name": "Explore for predictable temporary file names"}, "150": {"Motivation": 1, "Description": "An attacker exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most, systems, files and resources are organized in the same tree structure. This can be useful for attackers because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may know be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Attackers can take advantage of this to commit other types of attacks.", "Related_Attacks": [[154, "ChildOf"]], "ID": 150, "Categories": [], "Name": "Common resource location exploration"}, "151": {"Motivation": 1, "Description": "An attacker crafts a message that masquerades as a message from a principal other than the actual message sender. This may involve having the attacker create content for the purpose of making it appear to originate from a legitimate \"spoofed\" source. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. This attack need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the attacker attempts to change the apparent source. This attack differs from Content Spoofing attacks since, in Content Spoofing, the attacker does not wish to change the apparent source of the message but instead wishes to change what the source appears to say. In an Identity Spoofing attack, the attacker is attempting to change the apparent source of the content.", "Related_Attacks": [], "ID": 151, "Categories": ["Software", "Deceptive Interactions"], "Name": "Identity Spoofing"}, "153": {"Motivation": 1, "Description": "An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.", "Related_Attacks": [[262, "ChildOf"]], "ID": 153, "Categories": [], "Name": "Input Data Manipulation"}, "154": {"Motivation": 1, "Description": "An attacker utilizes discovered or crafted file path information for the purpose of locating and exploiting a security sensitive resource. This category of attack involves the paths used by an application to store or retrieve resources. Specifically, attacks in this category involve manipulating the path, causing the application to look in location unintended by the application maintainer, or determining the paths through prediction or lookup. This differs from File Manipulation attacks in which the contents of the files are affected or where the files themselves are physically moved. Instead, this attack simply concerns itself with the paths used to find or create resources.", "Related_Attacks": [[262, "ChildOf"]], "ID": 154, "Categories": ["Path Traversal"], "Name": "Resource Location Attacks"}, "155": {"Motivation": 1, "Description": "An attacker exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an attacker might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the attacker could recover this from the web cache.", "Related_Attacks": [[223, "ChildOf"]], "ID": 155, "Categories": [], "Name": "Screen Temporary Files for Sensitive Information"}, "157": {"Motivation": 1, "Description": "An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.", "Related_Attacks": [[117, "ChildOf"]], "ID": 157, "Categories": [], "Name": "Sniffing Attacks"}, "158": {"Motivation": 1, "Description": "An attacker monitoring network traffic between nodes of a public or multicast network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. This differs from other sniffing attacks in that it is over a public network rather via some other communications channel, such as radio.", "Related_Attacks": [[157, "ChildOf"]], "ID": 158, "Categories": [], "Name": "Sniffing Network Traffic"}, "159": {"Motivation": 1, "Description": "An attacker exploits the execution flow of a call to an external library to point to an attacker supplied library or code base, allowing the attacker to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an attacker can redirect an application's attempts to access these libraries to other libraries that the attacker supplies, the attacker will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.", "Related_Attacks": [[176, "ChildOf"], [132, "CanFollow"]], "ID": 159, "Categories": [], "Name": "Redirect Access to Libraries"}, "160": {"Motivation": 1, "Description": "Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script< tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.", "Related_Attacks": [[113, "ChildOf"]], "ID": 160, "Categories": [], "Name": "Programming to included script-based APIs"}, "161": {"Motivation": 1, "Description": "An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.", "Related_Attacks": [[262, "ChildOf"]], "ID": 161, "Categories": [], "Name": "Infrastructure Manipulation"}, "162": {"Motivation": 1, "Description": "An attacker exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server to effect a change in the state of an ordinary transaction. eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the attacker to acquire items at a lower cost than the merchant intended. The attacker performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.", "Related_Attacks": [[212, "ChildOf"]], "ID": 162, "Categories": [], "Name": "Manipulating hidden fields to change the normal flow of transactions (eShoplifting)"}, "163": {"Motivation": 1, "Description": "An attacker targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.", "Related_Attacks": [[98, "ChildOf"], [405, "CanFollow"], [406, "CanFollow"], [407, "CanFollow"], [408, "CanFollow"], [409, "CanFollow"]], "ID": 163, "Categories": [], "Name": "Spear Phishing"}, "164": {"Motivation": 1, "Description": "An attacker targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation on the Phishing social engineering technique where the attack is initiated via mobile texting rather than email. The user is enticed to provide information or go to a compromised web site via a text message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.", "Related_Attacks": [[98, "ChildOf"]], "ID": 164, "Categories": [], "Name": "Mobile Phishing (aka MobPhishing)"}, "165": {"Motivation": 1, "Description": "An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.", "Related_Attacks": [[262, "ChildOf"]], "ID": 165, "Categories": [], "Name": "File Manipulation"}, "166": {"Motivation": 1, "Description": "An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.", "Related_Attacks": [[171, "ChildOf"]], "ID": 166, "Categories": [], "Name": "Force the System to Reset Values"}, "167": {"Motivation": 1, "Description": "An attacker examines an available client application for the presence of sensitive information. This information may be stored in configuration files, embedded within the application itself, or stored in other ways. Sensitive information may include long-term keys, passwords, credit card or financial information, and other private material that the client uses in its interactions with the server. While servers are (hopefully) protected with professional security administrators, most users may be less skilled at protecting their clients. As a result, the user client may represent a weak link that an attacker can exploit. If an attacker can gain access to a client installation, they may be able to detect and lift sensitive information that could be used directly (such as financial information), or allow the attacker to subvert future communication between the client and the server. In some cases, it may not even be necessary to gain access to another user's installation - if all instances of the client software are embedded with the same sensitive information (for example, long term keys for communication with the server) then the attacker must simply find a way to gain their own copy of the client in order to perform this attack.", "Related_Attacks": [[189, "ChildOf"]], "ID": 167, "Categories": [], "Name": "Lifting Sensitive Data from the Client"}, "168": {"Motivation": 1, "Description": "An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.", "Related_Attacks": [[272, "ChildOf"]], "ID": 168, "Categories": [], "Name": "Windows ::DATA Alternate Data Stream"}, "169": {"Motivation": 1, "Description": "An attacker engages in probing and exploration activity to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.", "Related_Attacks": [], "ID": 169, "Categories": ["Software", "Hardware", "Gather Information"], "Name": "Footprinting"}, "170": {"Motivation": 1, "Description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.", "Related_Attacks": [[541, "ChildOf"]], "ID": 170, "Categories": [], "Name": "Web Application Fingerprinting"}, "171": {"Motivation": 1, "Description": "An attacker manipulates variables used by an application to perform a variety of possible attacks. This can either be performed through the manipulation of function call parameters or by manipulating external variables, such as environment variables, that are used by an application. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it).", "Related_Attacks": [[262, "ChildOf"]], "ID": 171, "Categories": [], "Name": "Variable Manipulation"}, "173": {"Motivation": 1, "Description": "An attacker is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Attackers may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.", "Related_Attacks": [], "ID": 173, "Categories": ["Software", "Deceptive Interactions"], "Name": "Action Spoofing"}, "174": {"Motivation": 1, "Description": "An attacker injects values to global parameters into a Flash movie embedded in an HTML document. These injected parameters are controlled through arguments in the URL used to access the embedding HTML document. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. The injected parameters can allow the attacker to control other objects within the Flash movie as well as full control over the parent document's DOM model.", "Related_Attacks": [[137, "ChildOf"], [246, "CanPrecede"], [460, "CanAlsoBe"]], "ID": 174, "Categories": [], "Name": "Flash Parameter Injection"}, "175": {"Motivation": 1, "Description": "An attacker exploits a weakness in input validation on the target to force arbitrary code to be retrieved from a remote location and executed. This differs from script injection in that script injection involves the direct inclusion of scripting code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application. One example of this sort of attack is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.", "Related_Attacks": [[152, "ChildOf"]], "ID": 175, "Categories": [], "Name": "Code Inclusion"}, "176": {"Motivation": 1, "Description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.", "Related_Attacks": [[262, "ChildOf"]], "ID": 176, "Categories": [], "Name": "Configuration/Environment manipulation"}, "177": {"Motivation": 1, "Description": "An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.", "Related_Attacks": [[165, "ChildOf"]], "ID": 177, "Categories": [], "Name": "Create files with the same name as files protected with a higher classification"}, "178": {"Motivation": 1, "Description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.", "Related_Attacks": [[182, "ChildOf"]], "ID": 178, "Categories": [], "Name": "Cross-Site Flashing"}, "179": {"Motivation": 1, "Description": "An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere. However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.", "Related_Attacks": [[113, "ChildOf"]], "ID": 179, "Categories": [], "Name": "Discovering, querying, and finally calling micro-services, such as w/ AJAX"}, "180": {"Motivation": 1, "Description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.", "Related_Attacks": [[122, "ChildOf"]], "ID": 180, "Categories": [], "Name": "Exploiting Incorrectly Configured Access Control Security Levels"}, "181": {"Motivation": 1, "Description": "An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.", "Related_Attacks": [[103, "ChildOf"]], "ID": 181, "Categories": [], "Name": "Flash File Overlay"}, "182": {"Motivation": 1, "Description": "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.", "Related_Attacks": [[152, "ChildOf"], [137, "CanAlsoBe"]], "ID": 182, "Categories": [], "Name": "Flash  Injection"}, "183": {"Motivation": 1, "Description": "An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.", "Related_Attacks": [[248, "ChildOf"]], "ID": 183, "Categories": [], "Name": "IMAP/SMTP Command Injection"}, "184": {"Motivation": 1, "Description": "An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.", "Related_Attacks": [[210, "ChildOf"]], "ID": 184, "Categories": [], "Name": "Software Integrity Attacks"}, "185": {"Motivation": 1, "Description": "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.", "Related_Attacks": [[184, "ChildOf"]], "ID": 185, "Categories": [], "Name": "Malicious Software Download"}, "186": {"Motivation": 1, "Description": "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source.", "Related_Attacks": [[185, "ChildOf"]], "ID": 186, "Categories": [], "Name": "Malicious Software Update"}, "187": {"Motivation": 1, "Description": "An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base.", "Related_Attacks": [[186, "ChildOf"], [105, "ChildOf"]], "ID": 187, "Categories": [], "Name": "Malicious Automated Software Update"}, "188": {"Motivation": 1, "Description": "An attacker discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices or components, or to software, although the methodology and techniques involved in each type of analysis differ widely.", "Related_Attacks": [[281, "ChildOf"]], "ID": 188, "Categories": [], "Name": "Reverse Engineering"}, "189": {"Motivation": 1, "Description": "An attacker discovers the structure, function, and composition of a type of computer software by using a variety of analysis techniques to effectively determine how the software functions and operates, or if vulnerabilities or security weakness are present within the implementation. Reverse engineering methods, as applied to software, can utilize a wide number approaches and techniques.", "Related_Attacks": [[188, "ChildOf"]], "ID": 189, "Categories": [], "Name": "Software Reverse Engineering"}, "190": {"Motivation": 1, "Description": "An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable.", "Related_Attacks": [[189, "ChildOf"], [175, "ChildOf"]], "ID": 190, "Categories": [], "Name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content"}, "191": {"Motivation": 1, "Description": "An attacker engages in activities to discover any sensitive strings are present within the compiled code of an executable, such as literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.", "Related_Attacks": [[190, "ChildOf"]], "ID": 191, "Categories": [], "Name": "Read Sensitive Strings Within an Executable"}, "192": {"Motivation": 1, "Description": "An attacker engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis inherently involves the analysis of a networking protocol, it does not require the presence of an actual or physical network. Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation.", "Related_Attacks": [[188, "ChildOf"], [189, "PeerOf"]], "ID": 192, "Categories": [], "Name": "Protocol Reverse Engineering"}, "193": {"Motivation": 1, "Description": "In this pattern the attacker is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows attackers to hijack the targeted application and force it to execute their own instructions.", "Related_Attacks": [[253, "ChildOf"]], "ID": 193, "Categories": [], "Name": "PHP Remote File Inclusion"}, "194": {"Motivation": 1, "Description": "The attacker provides data under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or it might be an attempt by the attacker to assume the rights granted to another identity. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation. This attack represents a subset of the Identity Spoofing and Content Spoofing attacks. Identity spoofing is a broader pattern, including situations where no data is exchange (for example, logging into a computer under an assumed name). Content Spoofing is likewise very similar, but would include cases where there is not an active attempt to fake a data source (for example, appending content onto an existing email message without changing the From field would be considered Content Spoofing, but not Faking the Source of Data since the data source was not faked).", "Related_Attacks": [[148, "ChildOf"]], "ID": 194, "Categories": [], "Name": "Fake the Source of Data"}, "195": {"Motivation": 1, "Description": "An attacker crafts a message that masquerades as a message from a person other than the actual message sender. This attack is a subset of the Identity Spoofing attack in that Principal Spoofing refers to pretending to be some other person in an interaction while Identity Spoofing refers to assuming the identity of any entity. As such, impersonating a server would be Identity Spoofing but not Principal Spoofing. The possible outcomes of Principal Spoofing mirror those of Identity Spoofing. (E.g. escalation of privilege and false attribution of data or activities.) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoofing attack. However, because Principal Spoofing is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people's perceptions by making statements or performing actions under a target's name).", "Related_Attacks": [[151, "ChildOf"]], "ID": 195, "Categories": [], "Name": "Principal Spoofing"}, "196": {"Motivation": 1, "Description": "An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.", "Related_Attacks": [[384, "CanPrecede"], [21, "ChildOf"]], "ID": 196, "Categories": [], "Name": "Session Credential Falsification through Forging"}, "197": {"Motivation": 1, "Description": "An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.", "Related_Attacks": [[230, "ChildOf"], [377, "ChildOf"]], "ID": 197, "Categories": [], "Name": "XML Entity Expansion"}, "198": {"Motivation": 1, "Description": "An attacker distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.", "Related_Attacks": [[18, "ChildOf"]], "ID": 198, "Categories": [], "Name": "Cross-Site Scripting in Error Pages"}, "199": {"Motivation": 1, "Description": "The attacker uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.", "Related_Attacks": [[18, "ChildOf"], [220, "ChildOf"]], "ID": 199, "Categories": [], "Name": "Cross-Site Scripting Using Alternate Syntax"}, "200": {"Motivation": 1, "Description": "An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content. For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application's administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information. For example, an application's output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information.", "Related_Attacks": [[56, "ChildOf"]], "ID": 200, "Categories": [], "Name": "Removal of filters: Input filters, output filters, data masking"}, "201": {"Motivation": 1, "Description": "An attacker creates an XML document that with an external entity reference. External entity references can take the form of <!ENTITY name system \"uri\"> tags in a DTD. Because processors may not validate documents with external entities, there may be no checks on the nature of the reference in the external entity. This can allow an attacker to open arbitrary files or connections. For example, the following DTD would attempt to open the /dev/tty device:", "Related_Attacks": [[231, "ChildOf"], [221, "ChildOf"]], "ID": 201, "Categories": [], "Name": "XML Entity Blowup"}, "202": {"Motivation": 1, "Description": "An attacker creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an attacker can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the attacker uses a malicious client, however, the attacker could ignore the server input and declare any total price. Likewise, an attacker could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance.", "Related_Attacks": [[151, "ChildOf"], [22, "ChildOf"]], "ID": 202, "Categories": [], "Name": "Create Malicious Client"}, "203": {"Motivation": 1, "Description": "An attacker manipulates the registry values used by an application to perform a variety of possible attacks. Many applications utilize registries to store configuration and service information. As such, attacks that manipulate these registries can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of the targeted application. It is important to note that \"registry\" does not only refer to the Microsoft Windows Registry, but to any registry used by an application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a registry value beyond an application's ability to store it), but given the long term usage of many registry values, the registry manipulation could be its own end.", "Related_Attacks": [[176, "ChildOf"]], "ID": 203, "Categories": [], "Name": "Manipulate Application Registry Values"}, "204": {"Motivation": 1, "Description": "An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.", "Related_Attacks": [[37, "ChildOf"]], "ID": 204, "Categories": [], "Name": "Lifting cached, sensitive data embedded in client distributions (thick or thin)"}, "205": {"Motivation": 1, "Description": "An attacker examines a target application's code or configuration files to find credential or key material that has been embedded within the application or its files. Many services require authentication with their users for the various purposes including billing, access control or attribution. Some client applications store the user's authentication credentials or keys to accelerate the login process. Some clients may have built-in keys or credentials (in which case the server is authenticating with the client, rather than the user). If the attacker is able to locate where this information is stored, they may be able to retrieve these credentials. The attacker could then use these stolen credentials to impersonate the user or client, respectively, in interactions with the service or use stolen keys to eavesdrop on nominally secure communications between the client and server.", "Related_Attacks": [[37, "ChildOf"]], "ID": 205, "Categories": [], "Name": "Lifting credential(s)/key material embedded in client distributions (thick or thin)"}, "206": {"Motivation": 1, "Description": "The attacker extracts credentials used for code signing from a production environment and uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer.", "Related_Attacks": [[68, "ChildOf"]], "ID": 206, "Categories": [], "Name": "Lifting signing key and signing malicious code from a production environment"}, "207": {"Motivation": 1, "Description": "An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.", "Related_Attacks": [[22, "ChildOf"], [184, "ChildOf"]], "ID": 207, "Categories": [], "Name": "Removing Important Functionality from the Client"}, "208": {"Motivation": 1, "Description": "An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.", "Related_Attacks": [[56, "ChildOf"]], "ID": 208, "Categories": [], "Name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements"}, "209": {"Motivation": 1, "Description": "An attacker creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. Some browsers will detect that the specified MIME type of the file does not match the actual type of the content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the attackers' script may run on the target unsanitized. For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked. In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters. In a cross-site scripting attack, the attacker tricks the victim into accessing a URL that uploads a script file with an incorrectly specified MIME type. If the victim's browser switches to the appropriate interpreter without filtering, the attack will execute as a standard XSS attack, possibly revealing the victim's cookies or executing arbitrary script in their browser.", "Related_Attacks": [[18, "ChildOf"]], "ID": 209, "Categories": [], "Name": "Cross-Site Scripting Using MIME Type Mismatch"}, "211": {"Motivation": 1, "Description": "An attacker utilizes web tools such as Mozilla's GreaseMonkey in order to modify the behavior of web applications, potentially violating assumptions that a server makes about web-based clients. Web-based client applications may use code such as JavaScript in order to populate fields submitted to a server or to ensure a correct order of operations. However, tools such as GreaseMonkey and Firebug can re-write a web site's JavaScript locally before it is interpreted on a client browser. As a result, the processing activities on the client may not conform to the server's expectations. For example, a web-based client application might use JavaScript to fill in the identity of the application's user based on other information that is available. However, if the attacker is utilizing a web tool to change the JavaScript of the web client, they could insert any identity that they wished, thus allowing them to impersonate other users. Depending on the client-functionality that the attacker is affecting, the attacker could impersonate other users, change purse-logic, remove client-based filters, and otherwise violate server expectations.", "Related_Attacks": [[113, "ChildOf"]], "ID": 211, "Categories": [], "Name": "Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior"}, "213": {"Motivation": 1, "Description": "An attacker with access to file system resources, either directly or via application logic, will use various file path specification or navigation mechanisms such as \"..\" in path strings and absolute paths to extend their range of access to inappropriate areas of the file system. The attacker attempts to either explore the file system for recon purposes or access directories and files that are intended to be restricted from their access. Exploring the file system can be achieved through constructing paths presented to directory listing programs, such as \"ls\" and 'dir', or through specially crafted programs that attempt to explore the file system. The attacker engaging in this type of activity is searching for information that can be used later in a more exploitive attack. Access to restricted directories or files can be achieved through modification of path references utilized by system applications.", "Related_Attacks": [[210, "ChildOf"]], "ID": 213, "Categories": [], "Name": "Directory Traversal"}, "214": {"Motivation": 1, "Description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.", "Related_Attacks": [[54, "ChildOf"]], "ID": 214, "Categories": [], "Name": "Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping"}, "215": {"Motivation": 1, "Description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information.", "Related_Attacks": [[54, "ChildOf"]], "ID": 215, "Categories": [], "Name": "Fuzzing and observing application log data/errors for application mapping"}, "216": {"Motivation": 1, "Description": "An attacker may take advantage of a setting in communications protocols where security settings or other choices involving the various parameters can be influenced or manipulated to cause compromise to the communications. This can be disclosure of information, insertion or removal of information from the communications stream, and even include remote system compromise.", "Related_Attacks": [[210, "ChildOf"]], "ID": 216, "Categories": [], "Name": "Abuse of Communication Channels"}, "217": {"Motivation": 1, "Description": "An attacker may take advantage of a setting in SSL that allows for weaknesses within that setting to be exploited to gain access to data intended to be encrypted, or injection commands or other traffic into the encrypted stream to cause compromise of either the client or server.", "Related_Attacks": [[216, "ChildOf"]], "ID": 217, "Categories": [], "Name": "Exploiting Incorrectly Configured SSL Security Levels"}, "218": {"Motivation": 1, "Description": "An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.", "Related_Attacks": [[148, "ChildOf"]], "ID": 218, "Categories": [], "Name": "Spoofing of UDDI/ebXML Messages"}, "219": {"Motivation": 1, "Description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Man in the Middle type attacks. The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of his or her choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.", "Related_Attacks": [[94, "ChildOf"], [377, "ChildOf"]], "ID": 219, "Categories": [], "Name": "XML  Routing Detour Attacks"}, "220": {"Motivation": 1, "Description": "An attacker takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.", "Related_Attacks": [[151, "ChildOf"], [22, "ChildOf"], [272, "ChildOf"]], "ID": 220, "Categories": [], "Name": "Client-Server Protocol Manipulation"}, "221": {"Motivation": 1, "Description": "This attack takes advantage of the entity replacement property of XML where the value of the replacement is a URI. A well-crafted XML document could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.", "Related_Attacks": [[122, "ChildOf"], [278, "ChildOf"], [376, "HasMember"]], "ID": 221, "Categories": [], "Name": "XML External Entities"}, "222": {"Motivation": 1, "Description": "In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks he or she is clicking on versus what he or she is actually clicking on.", "Related_Attacks": [[103, "ChildOf"]], "ID": 222, "Categories": [], "Name": "iFrame Overlay"}, "224": {"Motivation": 1, "Description": "An adversary compares output from a target system to known \"fingerprints\" that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.", "Related_Attacks": [[378, "HasMember"]], "ID": 224, "Categories": ["Software", "Gather Information"], "Name": "Fingerprinting"}, "226": {"Motivation": 1, "Description": "An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.", "Related_Attacks": [[196, "ChildOf"]], "ID": 226, "Categories": [], "Name": "Session Credential Falsification through Manipulation"}, "227": {"Motivation": 1, "Description": "An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource. The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.", "Related_Attacks": [], "ID": 227, "Categories": ["Software", "Deplete Resources"], "Name": "Sustained Client Engagement"}, "228": {"Motivation": 1, "Description": "An attacker utilizes a SOAP message to send the target a crafted DTD which consumes excessive resources when parsed on the end system resulting in resource depletion. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion. In this attack, the XML parser is part of a service that processes SOAP messages.", "Related_Attacks": [[230, "ChildOf"], [254, "ChildOf"]], "ID": 228, "Categories": [], "Name": "Resource Depletion through DTD Injection in a SOAP Message"}, "229": {"Motivation": 1, "Description": "This attack exploits certain XML parsers which manage data in an inefficient manner. The attacker crafts an XML document with many attributes in the same XML node. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm.", "Related_Attacks": [[231, "ChildOf"], [374, "HasMember"]], "ID": 229, "Categories": [], "Name": "XML Attribute Blowup"}, "230": {"Motivation": 1, "Description": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An attacker's goal is to leverage parser failure to his or her advantage. In most cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.230.1].", "Related_Attacks": [[130, "ChildOf"]], "ID": 230, "Categories": [], "Name": "XML Nested Payloads"}, "231": {"Motivation": 1, "Description": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the XML parser, an attacker can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An attacker's goal is to leverage parser failure to his or her advantage. In many cases this type of an attack will result in a denial of service due to an application becoming unstable, freezing, or crash. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [R.231.1].", "Related_Attacks": [[130, "ChildOf"]], "ID": 231, "Categories": [], "Name": "XML Oversized Payloads"}, "234": {"Motivation": 1, "Description": "An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured.", "Related_Attacks": [[232, "ChildOf"]], "ID": 234, "Categories": [], "Name": "Hijacking a privileged process"}, "235": {"Motivation": 1, "Description": "", "Related_Attacks": [[30, "ChildOf"], [236, "ChildOf"]], "ID": 235, "Categories": [], "Name": "Implementing a callback to system routine (old AWT Queue)"}, "236": {"Motivation": 1, "Description": "Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means.", "Related_Attacks": [[30, "ChildOf"], [232, "ChildOf"]], "ID": 236, "Categories": [], "Name": "Catching exception throw/signal from privileged block"}, "237": {"Motivation": 1, "Description": "The attacker may submit a malicious signed code from another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behave. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.", "Related_Attacks": [[68, "ChildOf"], [115, "ChildOf"]], "ID": 237, "Categories": [], "Name": "Calling Signed Code From Another Language Within A Sandbox Allow This "}, "238": {"Motivation": 1, "Description": "", "Related_Attacks": [[68, "ChildOf"]], "ID": 238, "Categories": [], "Name": "Using URL/codebase / G.A.C. (code source) to convince sandbox of privilege"}, "239": {"Motivation": 1, "Description": "", "Related_Attacks": [[56, "ChildOf"]], "ID": 239, "Categories": [], "Name": "Subversion of authorization checks: cache filtering, programmatic security, etc."}, "240": {"Motivation": 1, "Description": "", "Related_Attacks": [[152, "ChildOf"]], "ID": 240, "Categories": [], "Name": "Resource Injection"}, "241": {"Motivation": 1, "Description": "", "Related_Attacks": [[240, "ChildOf"]], "ID": 241, "Categories": [], "Name": "Code Injection"}, "242": {"Motivation": 1, "Description": "", "Related_Attacks": [[152, "ChildOf"]], "ID": 242, "Categories": [], "Name": "Script Injection"}, "243": {"Motivation": 1, "Description": "The attacker inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.", "Related_Attacks": [[18, "ChildOf"]], "ID": 243, "Categories": [], "Name": "Cross-Site Scripting in Attributes"}, "244": {"Motivation": 1, "Description": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.", "Related_Attacks": [[18, "ChildOf"], [220, "ChildOf"]], "ID": 244, "Categories": [], "Name": "Cross-Site Scripting via Encoded URI Schemes "}, "245": {"Motivation": 1, "Description": "The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.", "Related_Attacks": [[18, "ChildOf"]], "ID": 245, "Categories": [], "Name": "Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript"}, "246": {"Motivation": 1, "Description": "An attacker injects malicious script to global parameters in a Flash movie via a crafted URL. The malicious script is executed in the context of the Flash movie. As such, this is a form of Cross-Site Scripting (XSS), but the abilities granted to the Flash movie make this attack more flexible.", "Related_Attacks": [[18, "ChildOf"], [182, "ChildOf"]], "ID": 246, "Categories": [], "Name": "Cross-Site Scripting Using Flash"}, "247": {"Motivation": 1, "Description": "The attacker inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.", "Related_Attacks": [[18, "ChildOf"]], "ID": 247, "Categories": [], "Name": "Cross-Site Scripting with Masking through Invalid Characters in Identifiers"}, "248": {"Motivation": 1, "Description": "", "Related_Attacks": [[152, "ChildOf"]], "ID": 248, "Categories": [], "Name": "Command Injection"}, "249": {"Motivation": 1, "Description": "", "Related_Attacks": [[152, "ChildOf"]], "ID": 249, "Categories": [], "Name": "Character Injection"}, "250": {"Motivation": 1, "Description": "An attacker utilizes crafted XML user-controllable input probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.", "Related_Attacks": [[152, "ChildOf"], [356, "HasMember"]], "ID": 250, "Categories": [], "Name": "XML Injection"}, "251": {"Motivation": 1, "Description": "The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.", "Related_Attacks": [[175, "ChildOf"]], "ID": 251, "Categories": [], "Name": "Local Code Inclusion"}, "252": {"Motivation": 1, "Description": "The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.", "Related_Attacks": [[190, "ChildOf"]], "ID": 252, "Categories": [], "Name": "PHP Local File Inclusion"}, "254": {"Motivation": 1, "Description": "", "Related_Attacks": [[152, "ChildOf"], [279, "ChildOf"]], "ID": 254, "Categories": [], "Name": "DTD Injection in a SOAP Message"}, "256": {"Motivation": 1, "Description": "An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. When a data structure including a SOAP array is instantiated, the sender transmits the size of the array as an explicit parameter along with the data. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array. This, in turn, can lead to a server crash or even the execution of arbitrary code.", "Related_Attacks": [[100, "ChildOf"], [368, "HasMember"]], "ID": 256, "Categories": [], "Name": "SOAP Array Overflow"}, "257": {"Motivation": 1, "Description": "", "Related_Attacks": [[262, "ChildOf"]], "ID": 257, "Categories": [], "Name": "Abuse of Transaction Data Structure"}, "258": {"Motivation": 1, "Description": "Attackers can capture application code bound for an authorized client during a dynamic update and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.", "Related_Attacks": [[65, "ChildOf"]], "ID": 258, "Categories": [], "Name": "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update"}, "259": {"Motivation": 1, "Description": "Attackers can capture application code bound for an authorized client during patching and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.", "Related_Attacks": [[65, "ChildOf"]], "ID": 259, "Categories": [], "Name": "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching"}, "260": {"Motivation": 1, "Description": "Attackers can capture new application installation code bound for an authorized client during initial distribution and can use it, as-is or through reverse-engineering, to glean sensitive information or exploit the trust relationship between the client and server.", "Related_Attacks": [[65, "ChildOf"]], "ID": 260, "Categories": [], "Name": "Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution"}, "261": {"Motivation": 1, "Description": "An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.", "Related_Attacks": [[116, "ChildOf"]], "ID": 261, "Categories": [], "Name": "Fuzzing for garnering (through web or log) other adjacent user/sensitive data as an authorized system user (overly broad but valid SQL queries)"}, "263": {"Motivation": 1, "Description": "This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.", "Related_Attacks": [[165, "ChildOf"]], "ID": 263, "Categories": [], "Name": "Force Use of Corrupted Files"}, "264": {"Motivation": 1, "Description": "An attacker manipulates environment variables used by an application to perform a variety of possible attacks. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it).", "Related_Attacks": [[171, "ChildOf"]], "ID": 264, "Categories": [], "Name": "Environment Variable Manipulation"}, "265": {"Motivation": 1, "Description": "An attacker manipulates global variables used by an application to perform a variety of possible attacks. Changing variable values is usually undertaken as part of another attack; for example, a path traversal (inserting relative path modifiers) or buffer overflow (enlarging a variable value beyond an application's ability to store it).", "Related_Attacks": [[171, "ChildOf"]], "ID": 265, "Categories": [], "Name": "Global variable manipulation"}, "266": {"Motivation": 1, "Description": "", "Related_Attacks": [[153, "ChildOf"]], "ID": 266, "Categories": [], "Name": "Manipulate Canonicalization"}, "267": {"Motivation": 1, "Description": "This attack leverages the possibility to encode potentially harmful input and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult.", "Related_Attacks": [[153, "ChildOf"]], "ID": 267, "Categories": [], "Name": "Leverage Alternate Encoding"}, "268": {"Motivation": 1, "Description": "The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.", "Related_Attacks": [[262, "ChildOf"]], "ID": 268, "Categories": [], "Name": "Audit Log Manipulation"}, "269": {"Motivation": 1, "Description": "", "Related_Attacks": [[262, "ChildOf"]], "ID": 269, "Categories": [], "Name": "Registry Manipulation"}, "270": {"Motivation": 1, "Description": "", "Related_Attacks": [[269, "ChildOf"]], "ID": 270, "Categories": [], "Name": "Craft a Maliciously Misconfigured Registry"}, "271": {"Motivation": 1, "Description": "", "Related_Attacks": [[262, "ChildOf"]], "ID": 271, "Categories": [], "Name": "Schema Poisoning"}, "272": {"Motivation": 1, "Description": "The attacker subverts a communications protocol to perform an attack. These attacks can allow the attacker to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. These attacks target invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.", "Related_Attacks": [[262, "ChildOf"]], "ID": 272, "Categories": [], "Name": "Protocol Manipulation"}, "273": {"Motivation": 1, "Description": "An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions.", "Related_Attacks": [[220, "ChildOf"], [33, "PeerOf"], [360, "HasMember"]], "ID": 273, "Categories": [], "Name": "HTTP Response Smuggling"}, "274": {"Motivation": 1, "Description": "An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.", "Related_Attacks": [[220, "ChildOf"]], "ID": 274, "Categories": [], "Name": "HTTP Verb Tampering"}, "275": {"Motivation": 1, "Description": "An attacker serves content whose IP address is resolved by a DNS server that it controls and after initial contact by a web browser or similar client it changes the IP address to which its name resolves to an address within the target browser's organization that is not publicly accessible, thus allowing the web browser to examine this internal address on its behalf. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack an attacker publishes content on their own server with their own name and DNS server. The first time the target accesses the attackers' content, the attackers' name must be resolved to an IP address. The attacker's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the attackers' content the attackers' DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The attacker can then use scripts in the content the target retrieved from the attacker in the original message to exfiltrate data from the named internal addresses. This allows attackers to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the attacker identifies, additional attacks are possible. This attack differs from pharming attacks in that the attacker is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.", "Related_Attacks": [[272, "ChildOf"]], "ID": 275, "Categories": [], "Name": "DNS Rebinding"}, "276": {"Motivation": 1, "Description": "", "Related_Attacks": [[272, "ChildOf"]], "ID": 276, "Categories": [], "Name": "Inter-component Protocol Manipulation"}, "277": {"Motivation": 1, "Description": "", "Related_Attacks": [[272, "ChildOf"]], "ID": 277, "Categories": [], "Name": "Data Interchange Protocol Manipulation"}, "278": {"Motivation": 1, "Description": "An attacker manipulates functions and/or their values used by web-related protocols to cause a web application or service to react differently that intended, allowing the attacker to gain access to data or resources normally restricted or to cause the application or service to crash. This can either be performed through the manipulation of call parameters with unexpected values or by calling functions that should normally be restricted or limited.", "Related_Attacks": [[272, "ChildOf"]], "ID": 278, "Categories": [], "Name": "Web Services Protocol Manipulation"}, "279": {"Motivation": 1, "Description": "", "Related_Attacks": [[278, "ChildOf"]], "ID": 279, "Categories": [], "Name": "Soap Manipulation"}, "280": {"Motivation": 1, "Description": "An attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior. In a SOAP message, parameters take the form of values within XML elements. The server will have an XML schema that indicates certain restrictions on these parameter values. For example, the server may expect a parameter to be a string with fewer than 10 characters, or a number less than 100. In a SOAP parameter tampering attack, an attacker either violates this schema, or takes advantage of flexibility within the scheme (for example, a lack of a character limit) to provide parameters that a server might not expect. Examples of unexpected parameters include oversized data, data with different data types, inserting metacharacters within data, and sending contextually inappropriate data (for example, sending a non-existent product name in a product name field or using an out-of-order sequence number). Results of this attack can include information disclosure, denial of service, or even execution of arbitrary code.", "Related_Attacks": [[279, "ChildOf"]], "ID": 280, "Categories": [], "Name": "SOAP Parameter Tampering"}, "285": {"Motivation": 1, "Description": "An attacker sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the attacker is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An attacker can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. The attackers goal is to discover as many potential targets as possible can utilize a wide range of techniques to achieve this end. ICMP pings have the following characteristics:", "Related_Attacks": [[292, "ChildOf"]], "ID": 285, "Categories": [], "Name": "ICMP Echo Request Ping"}, "286": {"Motivation": 1, "Description": "An attacker engages in network reconnaissance operations to gather information about a target network or its hosts. Network Reconnaissance techniques can range from stealthy to noisy and utilize different tools and methods depending upon the scope of the reconnaissance. Some techniques may target single hosts while others are used against entire network address ranges, such as a CIDR class C or B network. In general, reconnaissance activities fall into 5 distinct categories.", "Related_Attacks": [], "ID": 286, "Categories": [], "Name": "Network Reconnaissance"}, "287": {"Motivation": 1, "Description": "An attacker uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics:", "Related_Attacks": [[300, "ChildOf"]], "ID": 287, "Categories": [], "Name": "TCP SYN Scan"}, "288": {"Motivation": 1, "Description": "An attacker sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the attacker is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An attacker can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. The attackers goal is to discover as many potential targets as possible can utilize a wide range of techniques to achieve this end. ICMP pings have the following characteristics:", "Related_Attacks": [[285, "CanAlsoBe"]], "ID": 288, "Categories": [], "Name": "DEPRECATED: ICMP Echo Request Ping"}, "289": {"Motivation": 1, "Description": "\"Infrastructure-based footprinting involves interacting with available network or application resources for the purpose of gathering information about the architecture, topology, configuration, or potential vulnerabilities and exposures of a target networking infrastructure.\"", "Related_Attacks": [[169, "CanAlsoBe"]], "ID": 289, "Categories": [], "Name": "DEPRECATED: Infrastructure-based footprinting"}, "290": {"Motivation": 1, "Description": "An attacker enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a Firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.", "Related_Attacks": [[309, "ChildOf"]], "ID": 290, "Categories": [], "Name": "Enumerate Mail Exchange (MX) Records"}, "291": {"Motivation": 1, "Description": "An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.", "Related_Attacks": [[309, "ChildOf"]], "ID": 291, "Categories": [], "Name": "DNS Zone Transfers"}, "292": {"Motivation": 1, "Description": "An attacker sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. An attacker usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal of the attacker is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the attacker can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep' where a particular kind of ping is sent to a range of IP addresses.", "Related_Attacks": [[169, "ChildOf"]], "ID": 292, "Categories": [], "Name": "Host Discovery"}, "293": {"Motivation": 1, "Description": "An attacker uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow an attacker to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP. As more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed", "Related_Attacks": [[309, "ChildOf"]], "ID": 293, "Categories": [], "Name": "Traceroute Route Enumeration"}, "294": {"Motivation": 1, "Description": "An attacker sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps an attacker plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the attacker determine operating system or firmware version. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.", "Related_Attacks": [[292, "ChildOf"]], "ID": 294, "Categories": [], "Name": "ICMP Address Mask Request"}, "295": {"Motivation": 1, "Description": "An attacker sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An attacker can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. An attacker may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.", "Related_Attacks": [[292, "ChildOf"]], "ID": 295, "Categories": [], "Name": "ICMP Timestamp Request"}, "296": {"Motivation": 1, "Description": "An attacker sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type that no has any use. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.", "Related_Attacks": [[292, "ChildOf"]], "ID": 296, "Categories": [], "Name": "ICMP Information Request"}, "297": {"Motivation": 1, "Description": "An attacker sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, an attacker identify that the host is alive by looking for a RST packet. Typically a remote server will respond with a RST regardless of whether a port is open or closed. In either case, the attacker can determine that the host is alive. TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. TCP ACK pings are most likely to fail in cases where a stateful firewall is present. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping has the following characteristics:", "Related_Attacks": [[292, "ChildOf"]], "ID": 297, "Categories": [], "Name": "TCP ACK Ping"}, "298": {"Motivation": 1, "Description": "An attacker sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an ICMP port unreachable message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ' ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts. A UDP Ping has the following characteristics:", "Related_Attacks": [[292, "ChildOf"]], "ID": 298, "Categories": [], "Name": "UDP Ping"}, "299": {"Motivation": 1, "Description": "An attacker uses a TCP SYN packets as a means of purpose of host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN \"synchronize\" packet by completing stage two of the 'three-way handshake' by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST \"reset\" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present SYN pings are preferable to ACK pings, because a stateful firewall will typically drop all unsolicited ACK packets because they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. An attacker will often alternate between SYN and ACK pings to discover if a host is alive. A TCP SYN ping has the following characteristics:", "Related_Attacks": [[292, "ChildOf"]], "ID": 299, "Categories": [], "Name": "TCP SYN Ping"}, "300": {"Motivation": 1, "Description": "An attacker uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the attacker information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that a port scan usually attempts to discover:", "Related_Attacks": [[169, "ChildOf"]], "ID": 300, "Categories": [], "Name": "Port Scanning"}, "301": {"Motivation": 1, "Description": "An attacker uses full TCP connection attempts to determine if a port is open. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. This type of scanning has the following characteristics. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. In terms of port status, TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming. Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports. A TCP Connect scan has the following characteristics:", "Related_Attacks": [[300, "ChildOf"]], "ID": 301, "Categories": [], "Name": "TCP Connect Scan"}, "302": {"Motivation": 1, "Description": "An attacker uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. The major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.", "Related_Attacks": [[300, "ChildOf"]], "ID": 302, "Categories": [], "Name": "TCP FIN scan"}, "303": {"Motivation": 1, "Description": "An attacker uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.", "Related_Attacks": [[300, "ChildOf"]], "ID": 303, "Categories": [], "Name": "TCP Xmas Scan"}, "304": {"Motivation": 1, "Description": "An attacker uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. he major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports.", "Related_Attacks": [[300, "ChildOf"]], "ID": 304, "Categories": [], "Name": "TCP Null Scan"}, "305": {"Motivation": 1, "Description": "An attacker uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the attacker analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall.", "Related_Attacks": [[300, "ChildOf"]], "ID": 305, "Categories": [], "Name": "TCP ACK Scan"}, "306": {"Motivation": 1, "Description": "An attacker engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. This scanning method works against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port.", "Related_Attacks": [[300, "ChildOf"]], "ID": 306, "Categories": [], "Name": "TCP Window Scan"}, "307": {"Motivation": 1, "Description": "An attacker scan for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port.", "Related_Attacks": [[300, "ChildOf"]], "ID": 307, "Categories": [], "Name": "TCP RPC Scan"}, "308": {"Motivation": 1, "Description": "An attacker engages in UDP scanning to gather information about UDP port status. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information. UDP scanning is further complicated by rate limiting mechanisms governing ICMP error messages. During a UDP scan, a datagram is sent to a target port. If an ICMP Type 3 Port unreachable error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port.", "Related_Attacks": [[300, "ChildOf"]], "ID": 308, "Categories": [], "Name": "UDP Scan"}, "309": {"Motivation": 1, "Description": "An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.", "Related_Attacks": [[169, "ChildOf"]], "ID": 309, "Categories": [], "Name": "Network Topology Mapping"}, "310": {"Motivation": 1, "Description": "An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.", "Related_Attacks": [], "ID": 310, "Categories": [], "Name": "Scanning for Vulnerable Software"}, "311": {"Motivation": 1, "Description": "An adversary engages in fingerprinting activities to determine the type or version of the operating system of the remote target. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol, the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.", "Related_Attacks": [[224, "ChildOf"]], "ID": 311, "Categories": [], "Name": "OS Fingerprinting"}, "312": {"Motivation": 1, "Description": "An attacker engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.", "Related_Attacks": [[311, "ChildOf"]], "ID": 312, "Categories": [], "Name": "Active OS Fingerprinting"}, "313": {"Motivation": 1, "Description": "An attacker engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods it is more stealthy.", "Related_Attacks": [[311, "ChildOf"]], "ID": 313, "Categories": [], "Name": "Passive OS Fingerprinting"}, "314": {"Motivation": 1, "Description": "An attacker engages in IP-based techniques for the purpose of fingerprinting operating systems on the network. By interrogating a particular IP stack implementation with IP segments that deviate from the ordinary or expected rules of RFC 791, an attacker can construct a fingerprint of unique behaviors for the target operating system. When this set of behaviors is analyzed against a database of known fingerprints, an attacker can make reliable inferences about the operating system type and version.", "Related_Attacks": [[312, "ChildOf"]], "ID": 314, "Categories": [], "Name": "IP Fingerprinting Probes"}, "315": {"Motivation": 1, "Description": "An attacker engages in TCP stack fingerprinting techniques to determine the type and version of operating systems on the network. TCP Fingerprinting involves manipulating portions of the TCP header or other characteristics in order to elicit a unique and identifiable response from an operating system. This response is compared against a database of known operating system fingerprints and a guess about the operating system type and version is made.", "Related_Attacks": [[312, "ChildOf"]], "ID": 315, "Categories": [], "Name": "TCP/IP Fingerprinting Probes"}, "316": {"Motivation": 1, "Description": "An attacker engages in ICMP stack fingerprinting techniques to determine the operating system type and version of a remote target. The role of ICMP as an ubiquitous diagnostic messaging protocol means that ICMP fingerprinting techniques are applicable to almost any internet host in a similar manner as TCP. ICMP fingerprinting techniques involve the generation of ICMP messages and analyzing the responses. This method is limited in that most firewalls are configured to block ICMP messages for security reasons, so it is most effective when used on an internal network segment. OS fingerprints using ICMP usually involve multiple different probes as the information returned from any one probe is usually insufficient to support a reliable OS inference.", "Related_Attacks": [[312, "ChildOf"]], "ID": 316, "Categories": [], "Name": "ICMP Fingerprinting Probes"}, "317": {"Motivation": 1, "Description": "This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis:", "Related_Attacks": [[314, "ChildOf"]], "ID": 317, "Categories": [], "Name": "IP ID Sequencing Probe"}, "318": {"Motivation": 1, "Description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.", "Related_Attacks": [[314, "ChildOf"]], "ID": 318, "Categories": [], "Name": "IP 'ID' Echoed Byte-Order Probe"}, "319": {"Motivation": 1, "Description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.", "Related_Attacks": [[314, "ChildOf"]], "ID": 319, "Categories": [], "Name": "IP (DF) 'Don't Fragment Bit' Echoing Probe"}, "320": {"Motivation": 1, "Description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.", "Related_Attacks": [[315, "ChildOf"]], "ID": 320, "Categories": [], "Name": "TCP Timestamp Probe"}, "321": {"Motivation": 1, "Description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows:", "Related_Attacks": [[315, "ChildOf"]], "ID": 321, "Categories": [], "Name": "TCP Sequence Number Probe"}, "322": {"Motivation": 1, "Description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.", "Related_Attacks": [[315, "ChildOf"]], "ID": 322, "Categories": [], "Name": "TCP (ISN) Greatest Common Divisor Probe"}, "323": {"Motivation": 1, "Description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.", "Related_Attacks": [[315, "ChildOf"]], "ID": 323, "Categories": [], "Name": "TCP (ISN) Counter Rate Probe"}, "324": {"Motivation": 1, "Description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.", "Related_Attacks": [[315, "ChildOf"]], "ID": 324, "Categories": [], "Name": "TCP (ISN) Sequence Predictability Probe"}, "325": {"Motivation": 1, "Description": "This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.", "Related_Attacks": [[315, "ChildOf"]], "ID": 325, "Categories": [], "Name": "TCP Congestion Control Flag (ECN) Probe"}, "326": {"Motivation": 1, "Description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the \"connected\" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.", "Related_Attacks": [[315, "ChildOf"]], "ID": 326, "Categories": [], "Name": "TCP Initial Window Size Probe"}, "327": {"Motivation": 1, "Description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.", "Related_Attacks": [[315, "ChildOf"]], "ID": 327, "Categories": [], "Name": "TCP Options Probe"}, "328": {"Motivation": 1, "Description": "This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.", "Related_Attacks": [[315, "ChildOf"]], "ID": 328, "Categories": [], "Name": "TCP 'RST' Flag Checksum Probe"}, "329": {"Motivation": 1, "Description": "An attacker uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or \"Quoted\" from the originating request that generated the ICMP error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: \"Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...].\" This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because \"older\" or \"legacy\" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.", "Related_Attacks": [[316, "ChildOf"]], "ID": 329, "Categories": [], "Name": "ICMP Error Message Quoting Probe"}, "330": {"Motivation": 1, "Description": "An attacker uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or \"Quoted\" from the originating request that generated the error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.", "Related_Attacks": [[316, "ChildOf"]], "ID": 330, "Categories": [], "Name": "ICMP Error Message Echoing Integrity Probe"}, "331": {"Motivation": 1, "Description": "An attacker sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable\" error message. RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart.", "Related_Attacks": [[316, "ChildOf"]], "ID": 331, "Categories": [], "Name": "ICMP IP Total Length Field Probe"}, "332": {"Motivation": 1, "Description": "An attacker sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are 3 behaviors that can be used to distinguish remote operating systems or firmware.", "Related_Attacks": [[316, "ChildOf"]], "ID": 332, "Categories": [], "Name": "ICMP IP 'ID' Field Error Message Probe"}, "383": {"Motivation": 1, "Description": "An attacker hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the attacker creating an event within the sub-application. Assume the attacker hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The attacker would then be able to spam those users within the application using an automated script.", "Related_Attacks": [[117, "ChildOf"]], "ID": 383, "Categories": [], "Name": "Harvesting Usernames or UserIDs via Application API Event Monitoring"}, "384": {"Motivation": 1, "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.", "Related_Attacks": [[94, "ChildOf"]], "ID": 384, "Categories": [], "Name": "Application API Message Manipulation via Man-in-the-Middle"}, "385": {"Motivation": 1, "Description": "An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.", "Related_Attacks": [[384, "ChildOf"]], "ID": 385, "Categories": [], "Name": "Transaction or Event Tampering via Application API Manipulation"}, "386": {"Motivation": 1, "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.", "Related_Attacks": [[385, "ChildOf"]], "ID": 386, "Categories": [], "Name": "Application API Navigation Remapping"}, "387": {"Motivation": 1, "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements.", "Related_Attacks": [[386, "ChildOf"]], "ID": 387, "Categories": [], "Name": "Navigation Remapping To Propagate Malicious Content"}, "388": {"Motivation": 1, "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination. For example, an in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:", "Related_Attacks": [[386, "ChildOf"]], "ID": 388, "Categories": [], "Name": "Application API Button Hijacking"}, "389": {"Motivation": 1, "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system.", "Related_Attacks": [[384, "ChildOf"]], "ID": 389, "Categories": [], "Name": "Content Spoofing Via Application API Manipulation"}, "390": {"Motivation": 1, "Description": "Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.", "Related_Attacks": [], "ID": 390, "Categories": ["Physical Security", "Gain Physical Access"], "Name": "Bypassing Physical Security"}, "391": {"Motivation": 1, "Description": "An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.", "Related_Attacks": [[390, "ChildOf"]], "ID": 391, "Categories": [], "Name": "Bypassing Physical Locks"}, "392": {"Motivation": 1, "Description": "An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.", "Related_Attacks": [[391, "ChildOf"]], "ID": 392, "Categories": [], "Name": "Lock Bumping"}, "393": {"Motivation": 1, "Description": "An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).", "Related_Attacks": [[391, "ChildOf"]], "ID": 393, "Categories": [], "Name": "Lock Picking"}, "394": {"Motivation": 1, "Description": "An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.", "Related_Attacks": [[391, "ChildOf"]], "ID": 394, "Categories": [], "Name": "Using a Snap Gun Lock to Force a Lock"}, "395": {"Motivation": 1, "Description": "An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.", "Related_Attacks": [[390, "ChildOf"]], "ID": 395, "Categories": [], "Name": "Bypassing Electronic Locks and Access Controls"}, "396": {"Motivation": 1, "Description": "An attacker bypasses the security of a card-based system by using techniques such as cloning access cards or using brute-force techniques. Card-based systems are widespread throughout business, government, and supply-chain management. Attacks against card-based systems vary widely based on the attackers' goals, but commonly include unauthorized reproduction of cards, brute-force creation of valid card-values, and attacks against systems which read or process card data. Due to the inherent weaknesses of card and badge security, high security environments will rarely rely upon the card or badge alone as a security mechanism. Common card based systems are used for financial transactions, user identification, and access control. Cloning attacks involve making an unauthorized copy of a user's card while brute-force attacks involve creating new cards with valid values. Denial of service attacks against card-based systems involve rendering the reader, or the card itself, to become disabled. Such attacks may be useful in a fail-closed system for keeping authorized users out of a location while a crime is in progress, whereas fail-open systems may grant access, or an alarm my fail to trigger, if an attacker disables or damages the card authentication device.", "Related_Attacks": [[395, "ChildOf"]], "ID": 396, "Categories": [], "Name": "Bypassing Card or Badge-Based Systems"}, "397": {"Motivation": 1, "Description": "An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.", "Related_Attacks": [[396, "ChildOf"]], "ID": 397, "Categories": [], "Name": "Cloning Magnetic Strip Cards"}, "398": {"Motivation": 1, "Description": "An attacker analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals. Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks. For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.", "Related_Attacks": [[396, "ChildOf"]], "ID": 398, "Categories": [], "Name": "Magnetic Strip Card Brute Force Attacks"}, "399": {"Motivation": 1, "Description": "An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse. RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user's identification.", "Related_Attacks": [[396, "ChildOf"]], "ID": 399, "Categories": [], "Name": "Cloning RFID Cards or Chips"}, "400": {"Motivation": 1, "Description": "An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it. When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.", "Related_Attacks": [[396, "ChildOf"]], "ID": 400, "Categories": [], "Name": "RFID Chip Deactivation or Destruction"}, "401": {"Motivation": 1, "Description": "An attacker exploits weaknesses in the physical hardware of a machine in order to gain unauthorized access to the device or system. Hacking hardware devices falls into several broad categories depending upon the relative sophistication of the attacker and the type of systems that are targeted. Attacks against hardware devices differ from software attacks in that hardware-based attacks target the chips, circuit boards, device ports, or other components that comprise a computer system or embedded system. The most common hardware devices which are attacked are computer systems such as laptops, desktops and server platforms. Sophisticated attacks may involve adding or removing jumpers to an exposed system, or applying sensors to portions of the motherboard to read data as it traverses the system bus.", "Related_Attacks": [], "ID": 401, "Categories": ["Hardware", "Alter System Components"], "Name": "Hacking Hardware Devices or Components"}, "402": {"Motivation": 1, "Description": "An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.", "Related_Attacks": [[401, "ChildOf"]], "ID": 402, "Categories": [], "Name": "Bypassing ATA Password Security"}, "404": {"Motivation": 1, "Description": "An attacker employs various means of gathering information about a target company, organization, or person. These techniques may range from using telephones, gathering trash or other discarded information, intrusion within company property, using the Internet for research, to querying individuals under false or misleading pretenses. A social engineer can use many small pieces of information to combine into a useful vulnerability of a system. Information can be important whether it comes from the janitor's office or from the CEO's office; each piece of paper, employee spoken to or area visited by the social engineer can add up enough information to attain access to sensitive data and resources of the company. The lesson here is all information, no matter how insignificant the employee believes it to be, may assist in creating a vulnerability for a company and an entrance for a social engineer. While the ultimate goal of the attacker may vary the purpose of these attacks is usually to gain access to computer systems or facilities.", "Related_Attacks": [], "ID": 404, "Categories": ["Social Engineering", "Gather Information"], "Name": "Social Information Gathering Attacks"}, "405": {"Motivation": 1, "Description": "An attacker employs various methods of information gathering to collect a body of information that facilitates the attackers' goals toward the target organization. Because an attacker's goals can vary so widely during this phase there is no one particular methodology that is often employed. During the research phase, for example, an attacker could use a company's automated directory service via the telephone to identify individuals in key positions of authority. Other methods could involve casing an establishment during high traffic hours to determine how strictly employees monitor who is entering the building behind them or something as simple as internet searching. Gathering information to support social engineering exercises is much the same as research you do for anything else. You need a goal in mind when you start in order to keep the research focused. Having a clear objective helps you determine what information is relevant to the end goal and what can be ignored. This holds true not only for the information gathered but also for how it's gathered.", "Related_Attacks": [[404, "ChildOf"]], "ID": 405, "Categories": [], "Name": "Social Information Gathering via Research"}, "406": {"Motivation": 1, "Description": "An attacker cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more. By collecting this information an attacker may be able to learn important facts about the person or organization that play a role in helping the attacker in their attack.", "Related_Attacks": [[404, "ChildOf"]], "ID": 406, "Categories": [], "Name": "Social Information Gathering via Dumpster Diving"}, "407": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the attackers' interests. During a pretexting attack the attacker creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie, in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information. Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. Basic pretexting attacks may simply seek to learn information about a target, but more complicated pretexting attacks seek to solicit a target to perform some action that assists the attacker in exploiting organizational weaknesses or obtaining access to secure facilities or systems. One example of a pretexting attack could be to dress up like a jogger and run in place by the entrance of a building, pretending to look for your access card. Because the hood obscures you face, it may be possible to solicit someone inside the building to let you inside. Pretexting is also not a one-size fits all solution. A social engineering attacker will have to develop many different pretexts over their career. All of them will have one thing in common, research. Good information gather techniques can make or break a good pretext. Being able to mimic the perfect tech support rep is useless if the target does not use outside support. Pretexting is also used in other areas of life other than social engineering. Sales, public speaking, so-called fortune tellers, NLP experts and even doctors, lawyers, therapists and the like all have to use a form of pretexting. They all have to create a scenario where a person is comfortable with releasing information they normally would not. One of the most important aspects of social engineering is trust. If the attacker cannot build trust they will most likely fail. A solid pretext is an essential part of building trust. If an attacker's alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on. Similar to inserting the proper key in a lock, the right pretext provides the proper cues to those around the attacker and can disarm their suspicions or doubts and open up the doors, so to speak. .", "Related_Attacks": [[404, "ChildOf"], [410, "ChildOf"]], "ID": 407, "Categories": [], "Name": "Social Information Gathering via Pretexting"}, "408": {"Motivation": 1, "Description": "An attacker engages in information gathering activities from traditional sources which are typically open, publicly available sources of information that don't require any illegal activity to obtain.. Tradition sources can include corporate websites, DNS (Domain Name Service) records, or even social media sites such as blogs or wikis. The goal is to collect as much information as possible so as to construct an accurate model that aids the attacker in conducting further social engineering attacks.", "Related_Attacks": [[404, "ChildOf"]], "ID": 408, "Categories": [], "Name": "Information Gathering from Traditional Sources"}, "409": {"Motivation": 1, "Description": "An attacker uses sources of information which are less obvious and often overlooked to learn about the target person or organization. These sources could be industry experts or insiders who might reveal key pieces of information that help the attacker determine possible social engineering vulnerabilities in the target. Other types of oblique information gathering might be to case or stalk particular employees to find out popular after work venues. The attacker would then visit that venue and sit in close proximity to the target individuals to gather information.", "Related_Attacks": [[404, "ChildOf"]], "ID": 409, "Categories": [], "Name": "Information Gathering from Non-Traditional Sources"}, "410": {"Motivation": 1, "Description": "An attacker engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.", "Related_Attacks": [], "ID": 410, "Categories": ["Social Engineering", "Gather Information"], "Name": "Information Elicitation via Social Engineering"}, "411": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the attackers' interests. Pretexting involves a mixture of role-play, subterfuge, and possibly some forms of disguise. Basic pretexting attacks may simply seek to learn information about a target, but more complicated pretexting attacks seek to solicit a target to perform some action that assists the attacker in exploiting organizational weaknesses or obtaining access to secure facilities or systems. One example of a pretexting attack could be to dress up like a jogger and run in place by the entrance of a building, pretending to look for your access card. Because the hood obscures you face, it may be possible to solicit someone inside the building to let you inside.", "Related_Attacks": [[407, "CanAlsoBe"]], "ID": 411, "Categories": [], "Name": "DEPRECATED: Pretexting"}, "412": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.", "Related_Attacks": [[407, "ChildOf"]], "ID": 412, "Categories": [], "Name": "Pretexting via Customer Service"}, "413": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. An attacker who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an attacker physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.", "Related_Attacks": [[407, "ChildOf"]], "ID": 413, "Categories": [], "Name": "Pretexting via Tech Support"}, "414": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and \"deliveries\" in order to be able to pull it off.", "Related_Attacks": [[407, "ChildOf"]], "ID": 414, "Categories": [], "Name": "Pretexting via Delivery Person"}, "415": {"Motivation": 1, "Description": "An attacker engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the attackers' interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.", "Related_Attacks": [[407, "ChildOf"]], "ID": 415, "Categories": [], "Name": "Pretexting via Phone"}, "416": {"Motivation": 1, "Description": "An attacker exploits inherent human psychological predispositions to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the attackers' interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled attacker uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the attackers' speech and thought patterns.", "Related_Attacks": [], "ID": 416, "Categories": ["Social Engineering", "Manipulate System Users"], "Name": "Target Influence via Social Engineering"}, "417": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 417, "Categories": [], "Name": "Target Influence via Perception of Reciprocation"}, "418": {"Motivation": 1, "Description": "An attacker uses a social engineering technique to produce a sense of obligation within the target to volunteer some key or sensitive piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. In the context of social engineering, obligation is closely related to reciprocation but is not limited to it. There are various techniques for producing a sense of obligation during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily. It can also be as simple as holding an outer door for someone will usually make them hold the inner door for you. It can be escalated to someone giving you private info because you create a sense of obligation. This is a common attack vector when targeting customer service people.", "Related_Attacks": [[417, "ChildOf"]], "ID": 418, "Categories": [], "Name": "Target Influence via Perception of Obligation"}, "419": {"Motivation": 1, "Description": null, "Related_Attacks": [[417, "ChildOf"]], "ID": 419, "Categories": [], "Name": "Target Influence via Perception of Concession"}, "420": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 420, "Categories": [], "Name": "Target Influence via Perception of Scarcity"}, "421": {"Motivation": 1, "Description": "An attacker uses a social engineering technique to convey a sense of authority that motivates the target reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization an attacker may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the attacker.", "Related_Attacks": [[416, "ChildOf"]], "ID": 421, "Categories": [], "Name": "Target Influence via Perception of Authority"}, "422": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 422, "Categories": [], "Name": "Target Influence via Perception of Commitment and Consistency"}, "423": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 423, "Categories": [], "Name": "Target Influence via Perception of Liking"}, "424": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 424, "Categories": [], "Name": "Target Influence via Perception of Consensus or Social Proof"}, "425": {"Motivation": 1, "Description": "An attacker uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the attackers' point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the attackers' perspective. One technique of framing is to avoid the use of the word \"No\" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the attacker.", "Related_Attacks": [[416, "ChildOf"]], "ID": 425, "Categories": [], "Name": "Target Influence via Framing"}, "426": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 426, "Categories": [], "Name": "Target Influence via Manipulation of Incentives"}, "427": {"Motivation": 1, "Description": null, "Related_Attacks": [[416, "ChildOf"]], "ID": 427, "Categories": [], "Name": "Target Influence via Psychological Principles"}, "428": {"Motivation": 1, "Description": "An attacker attunes their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the attacker has adapted their communication forms to match those of the target. When skillfully employed the target is likely to be unaware that they are being manipulated.", "Related_Attacks": [[427, "ChildOf"]], "ID": 428, "Categories": [], "Name": "Target Influence via Modes of Thinking"}, "429": {"Motivation": 1, "Description": null, "Related_Attacks": [[427, "ChildOf"]], "ID": 429, "Categories": [], "Name": "Target Influence via Eye Cues"}, "430": {"Motivation": 1, "Description": null, "Related_Attacks": [[427, "ChildOf"]], "ID": 430, "Categories": [], "Name": "Target Influence via Micro-Expressions"}, "431": {"Motivation": 1, "Description": null, "Related_Attacks": [[430, "ChildOf"]], "ID": 431, "Categories": [], "Name": "Target Influence via Neuro-Linguistic Programming (NLP)"}, "432": {"Motivation": 1, "Description": null, "Related_Attacks": [[431, "ChildOf"]], "ID": 432, "Categories": [], "Name": "Target Influence via Voice in NLP"}, "433": {"Motivation": 1, "Description": "An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message. The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human \"buffer overflow\" requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.", "Related_Attacks": [[427, "ChildOf"]], "ID": 433, "Categories": [], "Name": "Target Influence via The Human Buffer Overflow"}, "434": {"Motivation": 1, "Description": null, "Related_Attacks": [[427, "ChildOf"]], "ID": 434, "Categories": [], "Name": "Target Influence via Interview and Interrogation"}, "435": {"Motivation": 1, "Description": null, "Related_Attacks": [[427, "ChildOf"]], "ID": 435, "Categories": [], "Name": "Target Influence via Instant Rapport"}, "438": {"Motivation": 1, "Description": "An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.", "Related_Attacks": [], "ID": 438, "Categories": ["Supply Chain"], "Name": "Integrity Modification During Manufacture"}, "439": {"Motivation": 1, "Description": "An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.", "Related_Attacks": [], "ID": 439, "Categories": ["Supply Chain"], "Name": "Integrity Modification during Distribution"}, "440": {"Motivation": 1, "Description": "An attacker modifies a technology, product, component, or sub-component during its deployed use at the victim location for the purpose of carrying out an attack. After deployment, it is not uncommon for upgrades and replacements to occur involving firmware, software, hardware, replaceable parts etc. These upgrades and replacements are intended to correct defects, provide additional features, replace broken or worn-out parts, and are considered an important part of the lifecycle of a deployed piece of technology. As the upgrade and replacement part of the lifecycle can involve multiple manufacturers and suppliers, subcontractors, and cross international boundaries, there are multiple points of disruption for the attacker.", "Related_Attacks": [], "ID": 440, "Categories": ["Supply Chain"], "Name": "Integrity Modification During Deployed Use"}, "441": {"Motivation": 1, "Description": "An attacker inserts malicious logic into a product at some point during the supply chain lifecycle, typically in the form of a traditional virus or trojan backdoor.", "Related_Attacks": [], "ID": 441, "Categories": ["Supply Chain"], "Name": "Malicious Logic Inserted Into Product"}, "442": {"Motivation": 1, "Description": null, "Related_Attacks": [[441, "ChildOf"]], "ID": 442, "Categories": [], "Name": "Malicious Logic Inserted Into Product Software"}, "443": {"Motivation": 1, "Description": "An attacker uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by hackers.", "Related_Attacks": [[442, "ChildOf"]], "ID": 443, "Categories": [], "Name": "Malicious Logic Inserted Into Product Software by Authorized Developer"}, "444": {"Motivation": 1, "Description": null, "Related_Attacks": [[442, "ChildOf"]], "ID": 444, "Categories": [], "Name": "Malicious Logic Insertion into Product Software via Externally Manipulated Component"}, "445": {"Motivation": 1, "Description": "An attacker exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an attacker can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an attacker can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an attacker who has compromised the server can alter the software baseline that clients must install, allowing the attacker to compromise a large number of satellite machines using the configuration management system. If an attacker can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.", "Related_Attacks": [[444, "ChildOf"]], "ID": 445, "Categories": [], "Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation"}, "446": {"Motivation": 1, "Description": "An attacker conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.", "Related_Attacks": [[444, "ChildOf"]], "ID": 446, "Categories": [], "Name": "Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency"}, "447": {"Motivation": 1, "Description": "An attacker manipulates the codebase provided in a software patch, firmware version, or product update to contain malicious code. This results in devices, products, or software downloading and executing the attackers' code, or the code is introduced when the user updates the BIOS of a device. A malicious software update can perform any range of actions, depending on the attackers' intent. Of greatest concern are compromised updates that introduce logic bombs, deliberately hidden backdoors or rootkits, self-modifying code, keyloggers, or other means of gaining direct access to an organization's internal network.", "Related_Attacks": [[442, "ChildOf"]], "ID": 447, "Categories": [], "Name": "Malicious Logic Insertion into Product Software during Update"}, "448": {"Motivation": 1, "Description": "An attacker tampers with the code of a product and injects malicious logic into the device in order to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors becomes important vectors of attack.", "Related_Attacks": [[442, "ChildOf"]], "ID": 448, "Categories": [], "Name": "Malware Infection into Product Software"}, "449": {"Motivation": 1, "Description": "An attacker loads malicious code onto a USB memory stick in order to infect any supply chain-relevant machine which the device is plugged in to. This initially infected machine could then propagate the infection to products moving through the supply chain process. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship.", "Related_Attacks": [[448, "ChildOf"]], "ID": 449, "Categories": [], "Name": "Malware Propagation via USB Stick"}, "450": {"Motivation": 1, "Description": null, "Related_Attacks": [[449, "ChildOf"]], "ID": 450, "Categories": [], "Name": "Malware Propagation via USB U3 Autorun"}, "451": {"Motivation": 1, "Description": null, "Related_Attacks": [[448, "ChildOf"]], "ID": 451, "Categories": [], "Name": "Malware Propagation via Infected Peripheral Device"}, "452": {"Motivation": 1, "Description": null, "Related_Attacks": [[441, "ChildOf"]], "ID": 452, "Categories": [], "Name": "Malicious Logic Insertion into Product Hardware"}, "453": {"Motivation": 1, "Description": null, "Related_Attacks": [[452, "ChildOf"]], "ID": 453, "Categories": [], "Name": "Malicious Logic Insertion via Counterfeit Hardware"}, "454": {"Motivation": 1, "Description": null, "Related_Attacks": [[453, "ChildOf"]], "ID": 454, "Categories": [], "Name": "Modification of Existing Components with Counterfeit Hardware"}, "455": {"Motivation": 1, "Description": "An attacker produces counterfeit hardware components which are included in product assembly during some portion of the supply chain lifecycle. The production of products containing counterfeit components such as counterfeit routers, switches, Ethernet, as well as WAN (Wide Area Networking) cards results in the acquirer obtaining a device specifically designed for malicious purposes. The problem of counterfeit hardware is not limited to small or \"one-off\" vendors, but has included major trusted suppliers, such as Cisco. There are billions of transistors in a single integrated circuit and researchers have shown that fewer than 10 transistors are required to create malicious functionality, such as keylogging or password theft.", "Related_Attacks": [[453, "ChildOf"]], "ID": 455, "Categories": [], "Name": "Malicious Logic Insertion via Inclusion of Counterfeit Hardware Components"}, "456": {"Motivation": 1, "Description": null, "Related_Attacks": [[441, "ChildOf"]], "ID": 456, "Categories": [], "Name": "Malicious Logic Insertion into Product Memory"}, "457": {"Motivation": 1, "Description": null, "Related_Attacks": [[456, "ChildOf"]], "ID": 457, "Categories": [], "Name": "USB Memory Attacks"}, "458": {"Motivation": 1, "Description": "An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for \"flash\" based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card's chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.", "Related_Attacks": [[456, "ChildOf"]], "ID": 458, "Categories": [], "Name": "Flash Memory Attacks"}, "459": {"Motivation": 1, "Description": "An attacker exploits a weakness in the MD5 hash algorithm (weak collision resistance) to generate a certificate signing request (CSR) that contains collision blocks in the \"to be signed\" part. The attacker specially crafts two different, but valid X.509 certificates that when hashed with the MD5 algorithm would yield the same value. The attacker then sends the CSR for one of the certificates to the Certification Authority which uses the MD5 hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the attacker which is signed with its private key. An attacker then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the MD5 collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate.", "Related_Attacks": [[151, "ChildOf"]], "ID": 459, "Categories": [], "Name": "Creating a Rogue Certificate Authority Certificate"}, "460": {"Motivation": 1, "Description": "An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.", "Related_Attacks": [[137, "ChildOf"]], "ID": 460, "Categories": [], "Name": "HTTP Parameter Pollution (HPP)"}, "461": {"Motivation": 1, "Description": "When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) II M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1.", "Related_Attacks": [[115, "ChildOf"]], "ID": 461, "Categories": [], "Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"}, "462": {"Motivation": 1, "Description": "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.", "Related_Attacks": [[172, "ChildOf"], [116, "ChildOf"]], "ID": 462, "Categories": [], "Name": "Cross-Domain Search Timing"}, "463": {"Motivation": 1, "Description": "An attacker is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an attacker is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an attacker is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.", "Related_Attacks": [[97, "ChildOf"]], "ID": 463, "Categories": [], "Name": "Padding Oracle Crypto Attack"}, "464": {"Motivation": 1, "Description": "An attacker creates a very persistent cookie that is then sent by the server to the victim's browser when the victim visits a website. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others.", "Related_Attacks": [[212, "ChildOf"]], "ID": 464, "Categories": [], "Name": "Evercookie"}, "465": {"Motivation": 1, "Description": "A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client. Transparent proxies are often used by enterprises and ISPs.", "Related_Attacks": [[210, "ChildOf"]], "ID": 465, "Categories": [], "Name": "Socket Capable Browser Plugins Result In Transparent Proxy Abuse"}, "466": {"Motivation": 1, "Description": "An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information.", "Related_Attacks": [[94, "ChildOf"]], "ID": 466, "Categories": [], "Name": "Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy"}, "467": {"Motivation": 1, "Description": "An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep his or her session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).", "Related_Attacks": [[62, "ChildOf"], [408, "ChildOf"]], "ID": 467, "Categories": [], "Name": "Cross Site Identification"}, "468": {"Motivation": 1, "Description": "An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser", "Related_Attacks": [[116, "ChildOf"], [241, "ChildOf"]], "ID": 468, "Categories": [], "Name": "Generic Cross-Browser Cross-Domain Theft"}, "469": {"Motivation": 1, "Description": "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP.", "Related_Attacks": [[227, "ChildOf"]], "ID": 469, "Categories": [], "Name": "HTTP DoS"}, "470": {"Motivation": 1, "Description": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine.", "Related_Attacks": [[66, "ChildOf"], [108, "ChildOf"]], "ID": 470, "Categories": [], "Name": "Expanding Control over the Operating System from the Database"}, "471": {"Motivation": 1, "Description": "The attacker exploits the functionality of the Windows DLL loader where the process loading the DLL searches for the DLL to be loaded first in the same directory in which the process binary resides and then in other directories (e.g., System32). Exploitation of this preferential search order can allow an attacker to make the loading process load the attackers' rogue DLL rather than the legitimate DLL.", "Related_Attacks": [[251, "ChildOf"], [38, "ChildOf"], [159, "ChildOf"]], "ID": 471, "Categories": [], "Name": "DLL Search Order Hijacking"}, "472": {"Motivation": 1, "Description": "An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.", "Related_Attacks": [[541, "ChildOf"]], "ID": 472, "Categories": [], "Name": "Browser Fingerprinting"}, "473": {"Motivation": 1, "Description": "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.", "Related_Attacks": [[151, "ChildOf"]], "ID": 473, "Categories": [], "Name": "Signature Spoofing"}, "474": {"Motivation": 1, "Description": "An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.", "Related_Attacks": [[473, "ChildOf"]], "ID": 474, "Categories": [], "Name": "Signature Spoofing by Key Theft"}, "475": {"Motivation": 1, "Description": "An attacker exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.", "Related_Attacks": [[473, "ChildOf"], [459, "ParentOf"]], "ID": 475, "Categories": [], "Name": "Signature Spoofing by Improper Validation"}, "476": {"Motivation": 1, "Description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.", "Related_Attacks": [[473, "ChildOf"]], "ID": 476, "Categories": [], "Name": "Signature Spoofing by Misrepresentation"}, "477": {"Motivation": 1, "Description": "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.", "Related_Attacks": [[473, "ChildOf"]], "ID": 477, "Categories": [], "Name": "Signature Spoofing by Mixing Signed and Unsigned Content"}, "482": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.", "Related_Attacks": [[125, "ChildOf"]], "ID": 482, "Categories": [], "Name": "TCP Flood"}, "484": {"Motivation": 1, "Description": "Client applications such as web browsers that process HTML data often need to transform data in and out of the XML format by using an XML parser. It may be possible for an attacker to inject data that may have an adverse effect on the XML parser when it is being processed. These adverse effects may include the parser crashing, consuming too much of a resource, executing too slowly, executing code supplied by an attacker, allowing usage of unintended system functionality, etc. An attacker's goal is to leverage parser failure to his or her advantage. In some cases it may be possible to jump from the data plane to the control plane via bad data being passed to an XML parser. [R.484.1]", "Related_Attacks": [[82, "ChildOf"]], "ID": 484, "Categories": [], "Name": "XML Client-Side Attack"}, "485": {"Motivation": 1, "Description": "An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.", "Related_Attacks": [[473, "ChildOf"]], "ID": 485, "Categories": [], "Name": "Signature Spoofing by Key Recreation"}, "486": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.", "Related_Attacks": [[125, "ChildOf"]], "ID": 486, "Categories": [], "Name": "UDP Flood"}, "487": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.", "Related_Attacks": [[125, "ChildOf"]], "ID": 487, "Categories": [], "Name": "ICMP Flood"}, "488": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.", "Related_Attacks": [[125, "ChildOf"]], "ID": 488, "Categories": [], "Name": "HTTP Flood"}, "489": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.", "Related_Attacks": [[125, "ChildOf"]], "ID": 489, "Categories": [], "Name": "SSL Flood"}, "490": {"Motivation": 1, "Description": "An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.", "Related_Attacks": [], "ID": 490, "Categories": ["Software", "Deplete Resources"], "Name": "Amplification"}, "491": {"Motivation": 1, "Description": "An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash.", "Related_Attacks": [[230, "ChildOf"]], "ID": 491, "Categories": [], "Name": "XML Quadratic Expansion"}, "492": {"Motivation": 1, "Description": "An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.", "Related_Attacks": [[130, "ChildOf"]], "ID": 492, "Categories": [], "Name": "Regular Expression Exponential Blowup"}, "493": {"Motivation": 1, "Description": "An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.", "Related_Attacks": [[130, "ChildOf"]], "ID": 493, "Categories": [], "Name": "SOAP Array Blowup"}, "494": {"Motivation": 1, "Description": "An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.", "Related_Attacks": [[130, "ChildOf"]], "ID": 494, "Categories": [], "Name": "TCP Fragmentation"}, "495": {"Motivation": 1, "Description": "An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.", "Related_Attacks": [[130, "ChildOf"]], "ID": 495, "Categories": [], "Name": "UDP Fragmentation"}, "496": {"Motivation": 1, "Description": "An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.", "Related_Attacks": [[130, "ChildOf"]], "ID": 496, "Categories": [], "Name": "ICMP Fragmentation"}, "498": {"Motivation": 1, "Description": "An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.", "Related_Attacks": [[116, "ChildOf"]], "ID": 498, "Categories": [], "Name": "Probing Application Screenshots"}, "499": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.", "Related_Attacks": [[117, "ChildOf"]], "ID": 499, "Categories": [], "Name": "Intent Intercept"}, "500": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.", "Related_Attacks": [[253, "ChildOf"]], "ID": 500, "Categories": [], "Name": "WebView Injection"}, "501": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and convince the user to enter sensitive data as if they were interacting with the trusted activity.", "Related_Attacks": [[499, "ChildOf"], [173, "ChildOf"]], "ID": 501, "Categories": [], "Name": "Activity Hijack"}, "502": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent's action, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.", "Related_Attacks": [[148, "ChildOf"]], "ID": 502, "Categories": [], "Name": "Intent Spoof"}, "503": {"Motivation": 1, "Description": "An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.", "Related_Attacks": [[122, "ChildOf"]], "ID": 503, "Categories": [], "Name": "WebView Exposure"}, "504": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.", "Related_Attacks": [[173, "ChildOf"]], "ID": 504, "Categories": [], "Name": "Task Impersonation"}, "505": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.", "Related_Attacks": [[173, "ChildOf"]], "ID": 505, "Categories": [], "Name": "Scheme Squatting"}, "506": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap in an attacker desired location. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.", "Related_Attacks": [[173, "ChildOf"]], "ID": 506, "Categories": [], "Name": "Tapjacking"}, "507": {"Motivation": 1, "Description": "An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.", "Related_Attacks": [], "ID": 507, "Categories": ["Physical Security", "Gain Physical Access"], "Name": "Physical Theft"}, "510": {"Motivation": 1, "Description": "An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, \"piggy-backing\" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.", "Related_Attacks": [[21, "ChildOf"]], "ID": 510, "Categories": [], "Name": "SaaS User Request Forgery"}, "511": {"Motivation": 1, "Description": "An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.", "Related_Attacks": [[438, "ChildOf"]], "ID": 511, "Categories": [], "Name": "Infiltration of Software Development Environment"}, "516": {"Motivation": 1, "Description": "An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product, so that when the final product with the proper components is deployed, it will not perform as designed and be advantageous to the attacker.", "Related_Attacks": [[438, "ChildOf"]], "ID": 516, "Categories": [], "Name": "Hardware Component Substitution During Baselining"}, "517": {"Motivation": 1, "Description": "An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.", "Related_Attacks": [[438, "ChildOf"]], "ID": 517, "Categories": [], "Name": "Documentation Alteration to Circumvent Dial-down"}, "518": {"Motivation": 1, "Description": "An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.", "Related_Attacks": [[438, "ChildOf"]], "ID": 518, "Categories": [], "Name": "Documentation Alteration to Produce Under-performing Systems"}, "519": {"Motivation": 1, "Description": "An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.", "Related_Attacks": [[438, "ChildOf"]], "ID": 519, "Categories": [], "Name": "Documentation Alteration to Cause Errors in System Design"}, "520": {"Motivation": 1, "Description": "An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.", "Related_Attacks": [[438, "ChildOf"]], "ID": 520, "Categories": [], "Name": "Counterfeit Hardware Component Inserted During Product Assembly"}, "521": {"Motivation": 1, "Description": "An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.", "Related_Attacks": [[438, "ChildOf"]], "ID": 521, "Categories": [], "Name": "Hardware Design Specifications Are Altered"}, "522": {"Motivation": 1, "Description": "An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.", "Related_Attacks": [[439, "ChildOf"]], "ID": 522, "Categories": [], "Name": "Malicious Hardware Component Replacement"}, "523": {"Motivation": 1, "Description": "An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.", "Related_Attacks": [[439, "ChildOf"]], "ID": 523, "Categories": [], "Name": "Malicious Software Implanted"}, "524": {"Motivation": 1, "Description": "An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.", "Related_Attacks": [[439, "ChildOf"]], "ID": 524, "Categories": [], "Name": "Rogue Integration Procedures"}, "528": {"Motivation": 1, "Description": "An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one.", "Related_Attacks": [[125, "ChildOf"]], "ID": 528, "Categories": [], "Name": "XML Flood"}, "530": {"Motivation": 1, "Description": "An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.", "Related_Attacks": [[440, "ChildOf"]], "ID": 530, "Categories": [], "Name": "Counterfeit Component Supplied"}, "531": {"Motivation": 1, "Description": "An attacker substitutes a maliciously-altered hardware component for a tested and approved component to a sub-system developer or integrator, allowing for malicious hardware to end up and the victim's location once an upgrade or repair is performed. The attacker can then cause disruption or additional compromise.", "Related_Attacks": [[440, "ChildOf"]], "ID": 531, "Categories": [], "Name": "Hardware Component Substitution After Installation"}, "532": {"Motivation": 1, "Description": "An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.", "Related_Attacks": [[440, "ChildOf"]], "ID": 532, "Categories": [], "Name": "Altered BIOS Installed After Installation"}, "533": {"Motivation": 1, "Description": "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location.", "Related_Attacks": [[440, "ChildOf"]], "ID": 533, "Categories": [], "Name": "Malicious Software Update"}, "534": {"Motivation": 1, "Description": "An attacker introduces malicious code to the victim's system by altering hardware update or replacement components being provided to the victim, allowing for additional compromise or site disruption at the victim location.", "Related_Attacks": [[440, "ChildOf"]], "ID": 534, "Categories": [], "Name": "Malicious Hardware Update"}, "535": {"Motivation": 1, "Description": "An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.", "Related_Attacks": [[440, "ChildOf"]], "ID": 535, "Categories": [], "Name": "Malicious Gray Market Hardware"}, "536": {"Motivation": 1, "Description": "An attacker with access to data files and processes on a victim's system injects false data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the attacker.", "Related_Attacks": [[440, "ChildOf"]], "ID": 536, "Categories": [], "Name": "Data Injected During Configuration"}, "537": {"Motivation": 1, "Description": "An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. This infiltration is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.", "Related_Attacks": [[438, "ChildOf"]], "ID": 537, "Categories": [], "Name": "Infiltration of Hardware Development Environment"}, "538": {"Motivation": 1, "Description": "An attacker with access to an open source code project and knowledge of its particular use for in a system being developed, manufactured, or supported for the victim, can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.", "Related_Attacks": [[441, "ChildOf"]], "ID": 538, "Categories": [], "Name": "Open Source Libraries Altered"}, "539": {"Motivation": 1, "Description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.", "Related_Attacks": [[441, "ChildOf"]], "ID": 539, "Categories": [], "Name": "ASIC With Malicious Functionality"}, "540": {"Motivation": 1, "Description": "An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.", "Related_Attacks": [[123, "ChildOf"]], "ID": 540, "Categories": [], "Name": "Overread Buffers"}, "541": {"Motivation": 1, "Description": "An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.", "Related_Attacks": [[224, "ChildOf"]], "ID": 541, "Categories": [], "Name": "Application Fingerprinting"}}, "categories": {"512": {"Description": "Attack patterns within this category focus on the exploitation of communications and related protocols. The techniques defined by each pattern are used by an adversary to block, manipulate, and steal communications in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[117, "HasMember"]], "ID": 512, "Name": "Communications"}, "513": {"Description": "Attack patterns within this category focus on the exploitation of software applications. The techniques defined by each pattern are used to exploit these weaknesses in the application's design or implementation in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[116, "HasMember"], [123, "HasMember"], [125, "HasMember"], [130, "HasMember"], [131, "HasMember"], [148, "HasMember"], [151, "HasMember"], [169, "HasMember"], [173, "HasMember"], [224, "HasMember"], [227, "HasMember"], [490, "HasMember"]], "ID": 513, "Name": "Software"}, "514": {"Description": "Attack patterns within this category focus on physical security. The techniques defined by each pattern are used to exploit weaknesses in the physical security of a system in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[390, "HasMember"], [507, "HasMember"]], "ID": 514, "Name": "Physical Security"}, "515": {"Description": "Attack patterns within this category focus on the exploitation of the physical hardware used in computing systems. The techniques defined by each pattern reflect the replacement, destruction and general modification of components that make up a system in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[169, "HasMember"], [401, "HasMember"]], "ID": 515, "Name": "Hardware"}, "262": {"Description": "An attacker manipulates one or more resources, or some attribute thereof, in order to perform an attack. This is a broad class of attacks wherein the attacker is able to change some aspect of a resource's state and thereby affect application behavior or information integrity. Examples of resources include files, applications, libraries, infrastructure, and configuration information. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine.", "Related_Attacks": [], "ID": 262, "Name": "Manipulate Resources"}, "525": {"Description": "Attack patterns within this category focus on the adversary's ability to spread their malicious payload throughout a network of systems. These patterns of attack assume that the adversary has already found a way to deliver their payload to some system within the network. By spreading laterally throughout the system, the adversary is able to increase their access to information and perform more advanced actions.", "Related_Attacks": [], "ID": 525, "Name": "Lateral Movement"}, "526": {"Description": "Attack patterns within this category focus on alteration or manipulation of the components in a system in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[401, "HasMember"]], "ID": 526, "Name": "Alter System Components"}, "365": {"Description": "This category is related to the WASC Threat Classification 2.0 item Routing Detour", "Related_Attacks": [], "ID": 365, "Name": "WASC-32 - Routing Detour"}, "403": {"Description": "Attack patterns within this category focus on the manipulation and exploitation of people. The techniques defined by each pattern are used to convince someone into performing actions or divulging confidential information, often resulting in access to computer systems or facilities. While similar to a confidence trick or simple fraud, the term typically applies to trickery or deception for the purpose of information gathering, fraud, or computer system access. In most cases the adversary never comes face-to-face with the victim.", "Related_Attacks": [[404, "HasMember"], [410, "HasMember"], [416, "HasMember"]], "ID": 403, "Name": "Social Engineering"}, "152": {"Description": "An attacker is able to control or disrupt the behavior of an target through crafted input data submitted using an interface functioning to process data input. This happens when the attacker adds material to their input that is interpreted by the application causing the targeted application to perform steps unintended by the application manager or causing the application to enter an unstable state. This attack differs from Data Structure Attacks in that the latter attacks subvert the underlying structures that hold user-provided data, either pre-empting interpretation of the input (in the case of Buffer Overflows) or resulting in values that the targeted application is unable to handle correctly (in the case of Integer Overflows). In Injection attacks, the input is interpreted by the application, but the attacker has included instructions to the interpreting functions that the target application then follows.", "Related_Attacks": [], "ID": 152, "Name": "Injection"}, "281": {"Description": "Attack patterns within this category focus on the analysis of a target system, protocol, message, or application in order to overcome protections on the target or as a precursor to other attacks. Analysis can involve dissection of an application, analysis of message patterns, formal analysis of protocols, or other methods. The outcome of these attacks can be disclosure of sensitive information, or disclosure of security configuration that leads to further attacks targeted to discovered weaknesses.", "Related_Attacks": [], "ID": 281, "Name": "Analyze Target"}, "156": {"Description": "Attack patterns within this category focus on malicious interactions with a target in an attempt to deceive the target and convince the target that it is interacting with some other principal and as such take actions based on the level of trust that exists between the target and the other principal. These types of attacks assume that some piece of content or functionality is associated with an identity and that the content / functionality is trusted by the target because of this association. Often identified by the term \"spoofing\", these types of attacks rely on the falsification of the content and/or identity in such a way that the target will incorrectly trust the legitimacy of the content. For example, an attacker may modify a financial transaction between two parties so that the participants remain unchanged but the amount of the transaction is increased. If the recipient cannot detect the change, they may incorrectly assume the modified message originated with the original sender. Attacks of these type may involve an adversary crafting the content from scratch or capturing and modifying legitimate content.", "Related_Attacks": [[148, "HasMember"], [151, "HasMember"], [173, "HasMember"]], "ID": 156, "Name": "Deceptive Interactions"}, "369": {"Description": "This category is related to the WASC Threat Classification 2.0 item SSI Injection", "Related_Attacks": [], "ID": 369, "Name": "WASC-36 - SSI Injection"}, "382": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Password Recovery", "Related_Attacks": [], "ID": 382, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-49 - Insufficient Password Recovery"}, "172": {"Description": "An attacker exploits weaknesses in timing or state maintaining functions to perform actions that would otherwise be prevented by the execution flow of the target code and processes. An example of a state attack might include manipulation of an application's information to change the apparent credentials or similar information, possibly allowing the application to access material it would not normally be allowed to access. A common example of a timing attack is a test-action race condition where some state information is tested and, if it passes, an action is performed. If the attacker can change the state between the time that the application performs the test and the time the action is performed, then they might be able to manipulate the outcome of the action to malicious ends.", "Related_Attacks": [], "ID": 172, "Name": "Manipulate Timing and State"}, "436": {"Description": "Attack patterns within this category focus on gaining physical access to a system or device. The techniques defined by each pattern are used to exploit weaknesses that enable an adversary to achieve physical access.", "Related_Attacks": [[390, "HasMember"], [507, "HasMember"]], "ID": 436, "Name": "Gain Physical Access"}, "437": {"Description": "Attack patterns within this category focus on the disruption of the supply chain lifecycle by manipulating computer system hardware, software, or services for the purpose of espionage, theft of critical data or technology, or the disruption of mission-critical operations or infrastructure. Supply chain operations are usually multi-national with parts, components, assembly, and delivery occurring across multiple countries offering an attacker multiple points for disruption.", "Related_Attacks": [[438, "HasMember"], [439, "HasMember"], [440, "HasMember"], [441, "HasMember"]], "ID": 437, "Name": "Supply Chain"}, "381": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insecure Indexing", "Related_Attacks": [], "ID": 381, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-48 - Insecure Indexing"}, "527": {"Description": "Attack patterns within this category focus on the manipulation of a user in an attempt to achieve a desired negative technical impact.", "Related_Attacks": [[416, "HasMember"]], "ID": 527, "Name": "Manipulate System Users"}, "351": {"Description": "This category is related to the WASC Threat Classification 2.0 item Credential/Session Prediction", "Related_Attacks": [], "ID": 351, "Name": "WASC-18 - Credential/Session Prediction"}, "377": {"Description": "This category is related to the WASC Threat Classification 2.0 item XML Entity Expansion", "Related_Attacks": [], "ID": 377, "Name": "WASC-44 - XML Entity Expansion"}, "374": {"Description": "This category is related to the WASC Threat Classification 2.0 item XML Attribute Blowup", "Related_Attacks": [], "ID": 374, "Name": "WASC-41 - XML Attribute Blowup"}, "353": {"Description": "This category is related to the WASC Threat Classification 2.0 item Improper Input Handling", "Related_Attacks": [], "ID": 353, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-20 - Improper Input Handling"}, "375": {"Description": "This category is related to the WASC Threat Classification 2.0 item Abuse of Functionality", "Related_Attacks": [], "ID": 375, "Name": "WASC-42 - Abuse of Functionality"}, "361": {"Description": "This category is related to the WASC Threat Classification 2.0 item Null Byte Injection", "Related_Attacks": [], "ID": 361, "Name": "WASC-28 - Null Byte Injection"}, "334": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Authentication", "Related_Attacks": [], "ID": 334, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-01 - Insufficient Authentication"}, "335": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Authorization", "Related_Attacks": [], "ID": 335, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-02 - Insufficient Authorization"}, "336": {"Description": "This category is related to the WASC Threat Classification 2.0 item Integer Overflows", "Related_Attacks": [], "ID": 336, "Name": "WASC-03 - Integer Overflows"}, "337": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Transport Layer Protection", "Related_Attacks": [], "ID": 337, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-04 - Insufficient Transport Layer Protection"}, "338": {"Description": "This category is related to the WASC Threat Classification 2.0 item Remote File Inclusion", "Related_Attacks": [], "ID": 338, "Name": "WASC-05 - Remote File Inclusion"}, "339": {"Description": "This category is related to the WASC Threat Classification 2.0 item Format String", "Related_Attacks": [], "ID": 339, "Name": "WASC-06 - Format String"}, "212": {"Description": null, "Related_Attacks": [], "ID": 212, "Name": "Functionality Misuse"}, "341": {"Description": "This category is related to the WASC Threat Classification 2.0 item Cross-Site Scripting", "Related_Attacks": [], "ID": 341, "Name": "WASC-08 - Cross-Site Scripting"}, "342": {"Description": "This category is related to the WASC Threat Classification 2.0 item Cross-Site Request Forgery", "Related_Attacks": [], "ID": 342, "Name": "WASC-09 - Cross-Site Request Forgery"}, "343": {"Description": "This category is related to the WASC Threat Classification 2.0 item Denial of Service", "Related_Attacks": [], "ID": 343, "Name": "WASC-10 - Denial of Service"}, "344": {"Description": "This category is related to the WASC Threat Classification 2.0 item Brute Force", "Related_Attacks": [], "ID": 344, "Name": "WASC-11 - Brute Force"}, "345": {"Description": "This category is related to the WASC Threat Classification 2.0 item Content Spoofing", "Related_Attacks": [], "ID": 345, "Name": "WASC-12 - Content Spoofing"}, "346": {"Description": "This category is related to the WASC Threat Classification 2.0 item Information Leakage", "Related_Attacks": [], "ID": 346, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-13 - Information Leakage"}, "347": {"Description": "This category is related to the WASC Threat Classification 2.0 item Server Misconfiguration", "Related_Attacks": [], "ID": 347, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-14 - Server Misconfiguration"}, "348": {"Description": "This category is related to the WASC Threat Classification 2.0 item Application Misconfiguration", "Related_Attacks": [], "ID": 348, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-15 - Application Misconfiguration"}, "349": {"Description": "This category is related to the WASC Threat Classification 2.0 item Directory Indexing", "Related_Attacks": [], "ID": 349, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-16 - Directory Indexing"}, "350": {"Description": "This category is related to the WASC Threat Classification 2.0 item Improper Filesystem Permissions", "Related_Attacks": [], "ID": 350, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-17 - Improper Filesystem Permissions"}, "223": {"Description": "An attacker utilizes probabilistic techniques to explore and overcome security properties of the target that are based on an assumption of strength due to the extremely low mathematical probability that an attacker would be able to identify and exploit the very rare specific conditions under which those security properties do not hold.", "Related_Attacks": [], "ID": 223, "Name": "Probabilistic Techniques"}, "352": {"Description": "This category is related to the WASC Threat Classification 2.0 item SQL Injection", "Related_Attacks": [], "ID": 352, "Name": "WASC-19 - SQL Injection"}, "225": {"Description": "An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts. Weaknesses targeted by these sorts of attacks are often due to assumptions and overconfidence in the strength or rigor of the implemented authentication mechanisms.", "Related_Attacks": [], "ID": 225, "Name": "Exploitation of Authentication"}, "354": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Anti-automation", "Related_Attacks": [], "ID": 354, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-21 - Insufficient Anti-automation"}, "355": {"Description": "This category is related to the WASC Threat Classification 2.0 item Improper Output Handling", "Related_Attacks": [], "ID": 355, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-22 - Improper Output Handling"}, "356": {"Description": "This category is related to the WASC Threat Classification 2.0 item XML Injection", "Related_Attacks": [], "ID": 356, "Name": "WASC-23 - XML Injection"}, "357": {"Description": "This category is related to the WASC Threat Classification 2.0 item HTTP Request Splitting", "Related_Attacks": [], "ID": 357, "Name": "WASC-24 - HTTP Request Splitting"}, "358": {"Description": "This category is related to the WASC Threat Classification 2.0 item HTTP Response Splitting", "Related_Attacks": [], "ID": 358, "Name": "WASC-25 - HTTP Response Splitting"}, "359": {"Description": "This category is related to the WASC Threat Classification 2.0 item HTTP Request Smuggling", "Related_Attacks": [], "ID": 359, "Name": "WASC-26 - HTTP Request Smuggling"}, "232": {"Description": "An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage access to its resources or authorize utilization of its functionality. Such exploitation can lead to the complete subversion of any control the target has over its data or functionality enabling almost any desired action on the part of the attacker. Weaknesses targeted by these sorts of attacks are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and overconfidence in the strength or rigor of the implemented authorization mechanisms.", "Related_Attacks": [], "ID": 232, "Name": "Exploitation of Privilege/Trust"}, "233": {"Description": null, "Related_Attacks": [], "ID": 233, "Name": "Privilege Escalation"}, "362": {"Description": "This category is related to the WASC Threat Classification 2.0 item LDAP Injection", "Related_Attacks": [[136, "HasMember"]], "ID": 362, "Name": "WASC-29 - LDAP Injection"}, "363": {"Description": "This category is related to the WASC Threat Classification 2.0 item Mail Command Injection", "Related_Attacks": [], "ID": 363, "Name": "WASC-30 - Mail Command Injection"}, "364": {"Description": "This category is related to the WASC Threat Classification 2.0 item OS Commanding", "Related_Attacks": [], "ID": 364, "Name": "WASC-31 - OS Commanding"}, "210": {"Description": "An attacker manipulates one or more functions of an application in order to perform an attack. This is a broad class of attacks wherein the attacker is able to alter the intended result or purpose of the functionality and thereby affect application behavior or information integrity. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine.", "Related_Attacks": [], "ID": 210, "Name": "Abuse of Functionality"}, "366": {"Description": "This category is related to the WASC Threat Classification 2.0 item Path Traversal", "Related_Attacks": [], "ID": 366, "Name": "WASC-33 - Path Traversal"}, "367": {"Description": "This category is related to the WASC Threat Classification 2.0 item Predictable Resource Location", "Related_Attacks": [], "ID": 367, "Name": "WASC-34 - Predictable Resource Location"}, "368": {"Description": "This category is related to the WASC Threat Classification 2.0 item SOAP Array Abuse", "Related_Attacks": [], "ID": 368, "Name": "WASC-35 - SOAP Array Abuse"}, "360": {"Description": "This category is related to the WASC Threat Classification 2.0 item HTTP Response Smuggling", "Related_Attacks": [], "ID": 360, "Name": "WASC-27 - HTTP Response Smuggling"}, "370": {"Description": "This category is related to the WASC Threat Classification 2.0 item Session Fixation", "Related_Attacks": [], "ID": 370, "Name": "WASC-37 - Session Fixation"}, "371": {"Description": "This category is related to the WASC Threat Classification 2.0 item URL Redirector Abuse", "Related_Attacks": [], "ID": 371, "Name": "WASC-38 - URL Redirector Abuse"}, "372": {"Description": "This category is related to the WASC Threat Classification 2.0 item XPath Injection", "Related_Attacks": [], "ID": 372, "Name": "WASC-39 - XPath Injection"}, "373": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Process Validation", "Related_Attacks": [], "ID": 373, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-40 - Insufficient Process Validation"}, "118": {"Description": "Attack patterns within this category focus on the gathering, collection, and theft of information by an adversary. The adversary may collect this information through a variety of methods including active querying as well as passive observation. By exploiting weaknesses in the design or configuration of the target and its communications, an adversary is able to get the target to reveal more information than intended. Information retrieved may aid the adversary in making inferences about potential weaknesses, vulnerabilities, or techniques that assist the adversary's objectives. This information may include details regarding the configuration or capabilities of the target, clues as to the timing or nature of activities, or otherwise sensitive information. Often this sort of attack is undertaken in preparation for some other type of attack, although the collection of information by itself may in some cases be the end goal of the adversary.", "Related_Attacks": [[116, "HasMember"], [117, "HasMember"], [169, "HasMember"], [224, "HasMember"], [404, "HasMember"], [410, "HasMember"]], "ID": 118, "Name": "Gather Information"}, "119": {"Description": "Attack patterns within this category focus on the depletion of a resource to the point that the target's functionality is affected. Virtually any resource necessary for the target's operation can be targeted in this attack. The result of a successful resource depletion attack is usually the degrading or denial of one or more services offered by the target. Resources required will depend on the nature of the resource being depleted, the amount of resources the target has access to, and other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. The more protected the resource and the greater the quantity of it that must be consumed, the more skill the adversary will need to successfully execute attacks in this category.", "Related_Attacks": [[125, "HasMember"], [130, "HasMember"], [131, "HasMember"], [227, "HasMember"], [490, "HasMember"]], "ID": 119, "Name": "Deplete Resources"}, "376": {"Description": "This category is related to the WASC Threat Classification 2.0 item XML External Entities", "Related_Attacks": [], "ID": 376, "Name": "WASC-43 - XML External Entities"}, "340": {"Description": "This category is related to the WASC Threat Classification 2.0 item Buffer Overflow", "Related_Attacks": [], "ID": 340, "Name": "WASC-07 - Buffer Overflow"}, "378": {"Description": "This category is related to the WASC Threat Classification 2.0 item Fingerprinting", "Related_Attacks": [], "ID": 378, "Name": "WASC-45 - Fingerprinting"}, "379": {"Description": "This category is related to the WASC Threat Classification 2.0 item XQuery Injection", "Related_Attacks": [], "ID": 379, "Name": "WASC-46 - XQuery Injection"}, "380": {"Description": "This category is related to the WASC Threat Classification 2.0 item Insufficient Session Expiration", "Related_Attacks": [], "ID": 380, "Name": "DEPRECATED: WASC Threat Classification 2.0 - WASC-47 - Insufficient Session Expiration"}, "253": {"Description": null, "Related_Attacks": [], "ID": 253, "Name": "Remote Code Inclusion"}, "126": {"Description": "An attacker uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.", "Related_Attacks": [[154, "ChildOf"]], "ID": 126, "Name": "Path Traversal"}, "255": {"Description": "An attacker manipulates and exploits characteristics of system data structures in order to violate the intended usage and protections of these structures. This is done in such a way that yields either improper access to the associated system data or violations of the security properties of the system itself due to vulnerabilities in how the system processes and manages the data structures. Often, vulnerabilities and therefore exploitability of these data structures exist due to ambiguity and assumption in their design and prescribed handling.", "Related_Attacks": [], "ID": 255, "Name": "Manipulate Data Structures"}}}